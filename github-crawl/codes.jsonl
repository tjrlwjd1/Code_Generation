{"topic": "backtracking", "problem": "1038", "code": "# Authored by : gkgg123\n# Co-authored by : -\n# Link : http://boj.kr/ab9a5bb2d14943b3aefaf98f4648a469\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef bfs(N):\n    queue = deque()\n    for i in range(1, 10):\n        queue.append((i, str(i)))\n    while queue:\n        if len(result) == N + 1:\n            break\n        cur_num,totol_num = queue.popleft()\n        if cur_num != 0:\n            for k in range(cur_num):\n                next_num = totol_num + str(k)\n                queue.append((k,next_num))\n                result.append(next_num)\n\nN = int(input())\nresult = []\nfor i in range(10):\n    result.append(i)\n    \nif N >=10:\n    bfs(N)\n    \nif len(result) > N:\n    print(result[N])\nelse:\n    print(-1)"}
{"topic": "backtracking", "problem": "10974", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/f386e090dfe84518a7329d6f0a77f8c6\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS():\n    if len(arr) == N:\n        print(*arr)\n        return\n    for i in range(1, N+1):\n        if visited[i] == 0:\n            visited[i] = 1\n            arr.append(i)\n            DFS()\n            arr.pop()\n            visited[i] = 0\n\nN = int(input())\narr = []\nvisited = [0] * (N+1)\nDFS()"}
{"topic": "backtracking", "problem": "1182", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/1938989c82c1488282cdb2c22d4a9e17\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef backTracking(idx):\n    global ans\n    if len(poc) >= N:\n        if sum(poc) == S:\n            ans += 1\n        return\n    else:\n        if sum(poc) == S and poc:\n            ans += 1\n        for i in range(idx,N):\n            poc.append(arr[i])\n            backTracking(i+1)\n            poc.pop()\n            \nN, S = map(int, input().split())\narr = list(map(int, input().split()))\nvisited = [0] * N\npoc = []\nans = 0\nbackTracking(0)\nprint(ans)"}
{"topic": "backtracking", "problem": "1405", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/90f99f64ed7f4b2ba7af6cba10fac4b9\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x,y,ct,now):\n    global ans\n    if ct == N:\n        ans += now\n        return\n    for i in range(4):\n        dx = x + nx[i]\n        dy = y + ny[i]\n        if visited[dx][dy] == 0:\n            visited[dx][dy] = 1\n            DFS(dx,dy,ct+1,now*dir[i]/100)\n            visited[dx][dy] = 0\n            \narr = list(map(int, input().split()))\nans = 0\nnx = [0, 0, 1, -1]\nny = [1, -1, 0, 0]\nvisited = [[0 for i in range(31)] for j in range(31)]\nN = arr[0]\ndir = arr[1:]\nvisited[14][14] = 1\nDFS(14,14,0,1)\nprint(ans)"}
{"topic": "backtracking", "problem": "14712", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/117634e91c71493787610c9e0406a605\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\n\n# 1-index\nMap = [ [ 0 for _ in range(M + 1) ] for __ in range(N + 1) ]\nanswer = 0\n\ndef dfs(cnt):\n    global answer\n    if cnt == N * M:\n        answer += 1\n        return\n    \n    y = cnt // M + 1\n    x = cnt  % M + 1\n    \n    dfs(cnt + 1)\n    if Map[y - 1][x] == 0 or Map[y][x - 1] == 0 or Map[y - 1][x - 1] == 0: # \ub9cc\uc57d \ub193\uc744 \uc218 \uc788\ub294 \uacf3\uc774\ub77c\uba74\n        Map[y][x] = 1\n        dfs(cnt + 1)\n        Map[y][x] = 0\n\ndfs(0)\nprint(answer)"}
{"topic": "backtracking", "problem": "15649", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/69f68131effd4506a17fdac4b8569c6c\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(choose[idx], end=' ')\n        print()\n        return\n\n    for i in range(1, N + 1):\n        if used[i]:\n            continue\n        used[i] = 1\n        choose[cnt] = i\n        dfs(cnt + 1)\n        used[i] = 0\n\ndfs(0)"}
{"topic": "backtracking", "problem": "15650", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/afca9b0c42354f99a6578ab92e0de0a3\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(choose[idx], end=' ')\n        print()\n        return\n\n    for i in range(idx, N + 1):\n        if used[i]:\n            continue\n        used[i] = 1\n        choose[cnt] = i\n        dfs(i + 1, cnt + 1)\n        used[i] = 0\n\ndfs(1, 0)"}
{"topic": "backtracking", "problem": "15651", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/4631083fc0c04817af9b1020e2396ddc\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(choose[idx], end=' ')\n        print()\n        return\n\n    for i in range(1, N + 1):\n        choose[cnt] = i\n        dfs(i + 1, cnt + 1)\n\ndfs(1, 0)"}
{"topic": "backtracking", "problem": "15652", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/2a9874489cb74d7babd30d70501acff9\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(choose[idx], end=' ')\n        print()\n        return\n\n    for i in range(idx, N + 1):\n        choose[cnt] = i\n        dfs(i, cnt + 1)\n\ndfs(1, 0)"}
{"topic": "backtracking", "problem": "15654", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/fa5e88e6aac14dbabbbb8b5bc7037963\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    for i in range(0,N):\n        if used[i]:\n            continue\n        used[i] = 1\n        choose[cnt] = i\n        dfs(cnt + 1)\n        used[i] = 0\n\ndfs(0)"}
{"topic": "backtracking", "problem": "15655", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/d4f609a8ba2e40e8b578c37f3d21d344\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    for i in range(idx,N):\n        if used[i]:\n            continue\n        used[i] = 1\n        choose[cnt] = i\n        dfs(i + 1, cnt + 1)\n        used[i] = 0\n\ndfs(0, 0)"}
{"topic": "backtracking", "problem": "15656", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/dd28c9dd06a54efeb12b4f72e82e8c77\nimport sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    for i in range(0,N):\n        choose[cnt] = i\n        dfs(cnt + 1)\n\ndfs(0)"}
{"topic": "backtracking", "problem": "15657", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/7bbdc54527b2456d9e1e829834a2ece2\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    for i in range(idx,N):\n        choose[cnt] = i\n        dfs(i, cnt + 1)\n\ndfs(0, 0)"}
{"topic": "backtracking", "problem": "15658", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/7f225e2c0f214a7a9033560ded2a16d4\n\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(ans):\n    global MIN, MAX\n    if not arr:\n        MIN = min(MIN, ans)\n        MAX = max(MAX, ans)\n        return\n    for i in range(4):\n        if oper[i] > 0:\n            oper[i] -= 1\n            first = arr[0]\n            if i == 0:\n                DFS(ans+arr.popleft())\n            elif i == 1:\n                DFS(ans-arr.popleft())\n            elif i == 2:\n                DFS(ans*arr.popleft())\n            elif i == 3:\n                if ans < 0 and arr[0] > 0 or ans > 0 and arr[0] < 0:\n                    div = abs(ans) // abs(arr.popleft())\n                    DFS(-div)\n                else:\n                    DFS(ans//arr.popleft())\n            arr.appendleft(first)\n            oper[i] += 1\n\nN = int(input())\narr = deque(list(map(int, input().split())))\noper = list(map(int, input().split()))\nMIN = 1e9+1\nMAX = -1e9-1\nDFS(arr.popleft())\nprint(MAX)\nprint(MIN)"}
{"topic": "backtracking", "problem": "15663", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/186f2997e3dd48859f2ef8b729d98bf3\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    pre = -1\n    for i in range(N):\n        if used[i] or pre == arr[i]:\n            continue\n        pre = arr[i]\n        used[i] = 1\n        choose[cnt] = i\n        dfs(cnt + 1)\n        used[i] = 0\n\ndfs(0)"}
{"topic": "backtracking", "problem": "15664", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/e43bf55556be4bd19c0ae586bcf5d12a\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\nused   = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    pre = -1\n    for i in range(idx, N):\n        if used[i] or pre == arr[i]:\n            continue\n        pre = arr[i]\n        used[i] = 1\n        choose[cnt] = i\n        dfs(i + 1, cnt + 1)\n        used[i] = 0\n\ndfs(0, 0)"}
{"topic": "backtracking", "problem": "15665", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/fc8e94e5fb3f4384a7272130a0624d8d\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    pre = -1\n    for i in range(0, N):\n        if pre == arr[i]:\n            continue\n        pre = arr[i]\n        choose[cnt] = i\n        dfs(cnt + 1)\n\ndfs(0)"}
{"topic": "backtracking", "problem": "15666", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/dbd389b484d4468990a877b205126f0f\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr  = sorted(list(map(int, input().split())))\nchoose = [ 0 for _ in range(10) ]\n\ndef dfs(idx, cnt):\n    global N, M\n    if cnt == M:\n        for idx in range(cnt):\n            print(arr[choose[idx]], end=' ')\n        print()\n        return\n\n    pre = -1\n    for i in range(idx, N):\n        if pre == arr[i]:\n            continue\n        pre = arr[i]\n        choose[cnt] = i\n        dfs(i, cnt + 1)\n\ndfs(0, 0)"}
{"topic": "backtracking", "problem": "16198", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/3ba9e83879cc4489a5db43c977f87f45\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x):\n    global MAX\n    if len(arr) == 2:\n        MAX = max(MAX, x)\n        return\n    for i in range(1, len(arr)-1):\n        save = arr[i]\n        arr.pop(i)\n        DFS(x + arr[i-1] * arr[i])\n        arr.insert(i, save)\n\nN = int(input())\nMAX = 0\narr = list(map(int, input().split()))\nDFS(0)\nprint(MAX)"}
{"topic": "backtracking", "problem": "2026", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/23aa0efe0fd94f888b47fdcacfbce2c7\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nK, N, F = map(int, sys.stdin.readline().split())\nrelation = [[True if i == j else False for j in range(N+1)] for i in range(N+1)]\n\nfor _ in range(F):\n    a, b = map(int, sys.stdin.readline().split())\n    relation[a][b] = True\n    relation[b][a] = True\n\ndef check(cur, friends):  # \uc9c0\uae08\uae4c\uc9c0 \uc313\uc544\uc628 \uce5c\uad6c\ub4e4\uacfc \ubaa8\ub450 \uad00\uacc4\uac00 \uc131\ub9bd\ud558\ub294\uc9c0 \ud655\uc778\n    result = True\n    for friend in friends:\n        if not relation[cur][friend]:\n            result = False\n            break\n    return result\n\ndef dfs(start, relation, friends):\n    global flag, visit, answer\n    if flag:  # \uce5c\uad6c \uad00\uacc4 \uc131\ub9bd\ub418\uba74 \ub354\uc774\uc0c1 \ud560 \ud544\uc694 X\n        return\n    if len(friends) == K:  # \ub9cc\uc871\ud558\ub294 \uce5c\uad6c\uad00\uacc4\uac00 K\uac1c \uc77c\ub54c\n        flag = True\n        answer = friends\n        return\n    for nxt, status in enumerate(relation[start]):\n        if not status: continue\n        if visit[nxt]: continue\n        if not check(nxt, friends): continue\n        visit[nxt] = True\n        dfs(nxt, relation, friends + [nxt])\n        visit[nxt] = False\n\ndef solution(relation, K):\n    global flag, visit, answer\n    flag = False\n    answer = -1\n    visit = [False for _ in range(N+1)]\n    for i in range(1, N+1):\n        if sum(relation[i]) < K: continue  # i\ubc88\uc9f8 \uc0ac\ub78c\uc758 \uce5c\uad6c\uac00 K\ubcf4\ub2e4 \uc791\uc73c\uba74 \ud560 \ud544\uc694 X\n        if flag:  # \uc131\uacf5\ud55c \uc801 \uc788\uc73c\uba74 \ub354\uc774\uc0c1 \ud560 \ud544\uc694 X\n            break\n        visit[i] = True\n        dfs(i, relation, [i])\n        visit[i] = False\n    return answer\n\nanswer = solution(relation, K)\n\nif flag:\n    for num in answer:\n        print(num)\nelse:\n    print(-1)"}
{"topic": "backtracking", "problem": "22944", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/62858e6576584934b6d2db90001acd5b\n\nimport sys\nsys.setrecursionlimit(10**4)\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, h, d = map(int, input().split())\n\nvisit = [[False] * n for _ in range(n)]\numbs = []\nfor i in range(n):\n    line = input()\n    for j in range(n):\n        if line[j] == 'U':\n            umbs.append([i, j])\n        elif line[j] == 'S':\n            start = [i, j]\n        elif line[j] == 'E':\n            end = [i, j]\n\nINF = 99999999\nanswer = INF\n\ndy = [0, 0, -1, 1]\ndx = [-1, 1, 0, 0]\n\ndef dfs(cur):\n    global answer, n\n    y, x, health, durability, cnt = cur\n    dist = abs(end[0] - y) + abs(end[1] - x)\n    if dist <= health + durability:\n        answer = min(answer, cnt + dist)\n        return\n    else:\n        for umb in umbs:\n            uy, ux = umb\n            if visit[uy][ux]: continue\n            dist2 = abs(uy - y) + abs(ux - x)\n            if dist2 - 1 >= health + durability: continue\n            visit[uy][ux] = True\n            if dist2 <= durability:\n                dfs((uy, ux, health, d, cnt + dist2))\n            else:\n                dfs((uy, ux, health + durability - dist2, d, cnt + dist2))\n            visit[uy][ux] = False\n\ndfs((start[0], start[1], h, 0, 0))\n\nif answer == INF:\n    print(-1)\nelse:\n    print(answer)"}
{"topic": "binary_search", "problem": "10816", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/3bcac4799e584285b9df8be8d69ab79a\nimport sys\nfrom bisect import bisect_left, bisect_right\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = list(map(int, input().split()))\nM = int(input())\narr2 = list(map(int, input().split()))\narr.sort()\nfor i in arr2:\n    idx_left = bisect_left(arr,i)\n    idx_right = bisect_right(arr,i)\n    print(idx_right - idx_left, end=' ')"}
{"topic": "binary_search", "problem": "1477", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/b93ed1e8f2a7413fa8fe39483692604f\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m, l = map(int, input().split())\nrests = sorted([0] + list(map(int, input().split())) + [l])\n\nlow = 1\nhigh = l\nanswer = high\nwhile low <= high:\n    mid = (low + high) // 2\n    \n    cnt = 0\n    for i in range(n+1):\n        cnt += (rests[i+1] - rests[i] - 1) // mid \n        \n    if cnt<=m:\n        answer = mid\n        high = mid - 1\n    else:\n        low = mid + 1\n        \nprint(answer)"}
{"topic": "binary_search", "problem": "1654", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/5200a798517a4ec09af16f496ad137bd\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef binary_search():\n    global ans\n    start, end = 1, max(arr)\n\n    while start <= end:\n        ct = 0\n        mid = (start + end) // 2\n        for i in arr:\n            ct += i // mid\n        if ct < N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    ans = end\n\nK,N = map(int, input().split())\narr = []\nans = 0\nfor i in range(K):\n    arr.append(int(input()))\nbinary_search()\nprint(ans)"}
{"topic": "binary_search", "problem": "2470", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/c487c1f5e7f34df0aaeba6a14fb6b2a5\nfrom bisect import bisect_left\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst_pos, lst_neg = [], []\ninput_lst = list(map(int, input().split()))\nfor x in input_lst:\n    if x > 0: lst_pos.append(x)\n    else: lst_neg.append(x)\n\nlst_pos.sort()\nlst_neg.sort()\n\nif not lst_pos: print(*lst_neg[-2:]) # \uc591\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0\nelif not lst_neg: print(*lst_pos[:2]) # \uc74c\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0\nelse:\n    tmp = 2000000001 #\ucd5c\uc545 \ucf00\uc774\uc2a4+1\n    if len(lst_neg) > 1: # \uc74c\uc218\ub9cc \uac00\uc9c0\uace0 \ub2f5\uc77c \uc218 \uc788\uc74c\n        if tmp > abs(sum(lst_neg[-2:])):\n            tmp = abs(sum(lst_neg[-2:]))\n            sol = lst_neg[-2:]\n\n    if len(lst_pos) > 1: # \uc591\uc218\ub9cc \uac00\uc9c0\uace0 \ub2f5\uc77c \uc218 \uc788\uc74c\n        if tmp > abs(sum(lst_pos[:2])):\n            tmp = abs(sum(lst_pos[:2]))\n            sol = lst_pos[:2]  \n\n    for num in lst_neg:\n        idx = bisect_left(lst_pos, -num)\n        if idx == len(lst_pos): idx -= 1 # \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4\n        elif idx == 0: pass # \ucc98\uc74c \uc778\ub371\uc2a4\n        elif abs(num+lst_pos[idx]) > abs(num+lst_pos[idx-1]): # \ub458 \uc911 \ucd5c\uc801 \uc120\ud0dd\n            idx -= 1\n\n        if tmp > abs(num+lst_pos[idx]): # \ud544\uc694 \uc2dc \uc5c5\ub370\uc774\ud2b8\n            tmp = abs(num+lst_pos[idx])\n            sol = sorted([num, lst_pos[idx]])\n\n    print(*sol)"}
{"topic": "binary_search", "problem": "2512", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/7910ebb7f8ec409ba2e93cb14d047a19\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef binary_search():\n    start, end = 0, max(arr)\n    while start <= end:\n        mid = (start + end) // 2\n        total = 0\n        for i in arr:\n            if mid < i:\n                total += mid\n            else:\n                total += i\n        if total <= M:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return end\n    \nN = int(input())\narr = list(map(int, input().split()))\nM = int(input())\nprint(binary_search())"}
{"topic": "binary_search", "problem": "2776", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/93afacc450454aedbd2b0d6667914846\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef binary_search(t):\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == t:\n            return 1\n        elif arr[mid] > t:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return 0\n\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    M = int(input())\n    arr2 = list(map(int, input().split()))\n    arr.sort()\n    for j in arr2:\n        print(binary_search(j))"}
{"topic": "binary_search", "problem": "2805", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/331c1288d35f4db9b12e371e014dfffd\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef binary_search():\n    global ans\n    start, end = 0, max(arr)\n\n    while start <= end:\n        mid = (start + end) // 2\n        total_length = 0\n        for i in arr:\n            if i - mid >= 0:\n                total_length += i - mid\n\n        if total_length < M:\n            end = mid - 1\n        else:\n            start = mid + 1\n    ans = end\n\nN, M = map(int, input().split())\narr = list(map(int, input().split()))\nans = 0\nbinary_search()\nprint(ans)"}
{"topic": "binary_search", "problem": "3079", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/efcb8c8f772044538717ee1203d7c02d\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\narr = [int(input()) for _ in range(n)]\n    \nlow, high = 0, 1000000000 * m\nwhile low <= high:\n    mid = (low + high)//2\n    cnt = 0\n    for time in arr:\n        cnt += mid//time\n    if cnt>=m:\n        high = mid - 1\n    else:\n        low = mid + 1\n\nprint(low)"}
{"topic": "binary_search", "problem": "6236", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/2fe2f6f8da4f448a8b1b2e6a4da13627\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef binary_search():\n    global K\n    start, end = max(arr), sum(arr)\n    while start <= end:\n        mid = (start + end) // 2\n        have,ct = 0,0\n        for i in arr:\n            if have < i:\n                have = mid - i\n                ct += 1\n            else:\n                have = have - i\n        if ct > M:\n            start = mid + 1\n        else:\n            end = mid - 1\n            K = mid\n        \nN, M = map(int, input().split())\narr = []\nK = 0\nfor i in range(N):\n    arr.append(int(input()))\nbinary_search()\nprint(K)"}
{"topic": "brute_force", "problem": "1145", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/d16fad5335804ed3a30799f0cf9fdf11\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\narr = list(map(int, input().split()))\nfor i in range(min(arr), 1000001):\n    ct = 0\n    for j in range(5):\n        if i % arr[j] == 0:\n            ct += 1\n    if ct >= 3:\n        print(i)\n        break"}
{"topic": "brute_force", "problem": "13410", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/6cd0f036ab1d40eaad68c57ee4eb6ff4\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, K = map(int, input().split())\nnum  = [ int(str(N * i)[::-1]) for i in range(1, K + 1) ]\nprint(max(num))"}
{"topic": "brute_force", "problem": "1436", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/32ff54d1000b438281226631f054c697\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nct = 0\nans = 0\nnum = 666\n\nwhile True:\n\n    if '666' in str(num):\n        ct += 1\n\n    if ct == N:\n        ans = num\n        break\n\n    num += 1\n\nprint(ans)"}
{"topic": "brute_force", "problem": "14500", "code": "#Authored by : shjeong92\n#Co-authored by : -\n#Link : http://boj.kr/04d943fbb1d14ca0b17c62790a25fe8a\nimport sys\nfrom itertools import combinations as combi\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int,input().split())\n#\ubcf4\ub4dc\uc785\ub825\ubc1b\uae30\nboard = [list(map(int,input().split())) for _ in range(N)]\n#\ubc31\ud2b8\ub798\ud0b9\uc6a9 \uccb4\ud06c\ncheck = [ [True] * M for _ in range(N)]\n#RLUD\ndx = (0,0,-1,1)\ndy = (1,-1,0,0)\nanswer = 0\n#T \uc790\ube14\ub85d \uac80\uc0c9\ndef block_T(x,y):\n    #\uc911\uc559\uc758 \ud55c \uc810\uc774\ub77c\uace0 \uac00\uc815\ud55c\ub2e4\n    result = board[x][y]\n    # \uc0c1\ud558\uc88c\uc6b0\uc758 \ud2f0\uc5b4\ub098\uc628\ubd80\ubd84 \uc911 \ub0a0\uac1c\uac00 4\uac1c\uba74 \n    # \uc81c\uc77c\uc791\uc740 \uac12\uc744 \uc81c\uac70\ud55c\uac12\uc774 \ucd5c\ub300\uac12\uc774 \ub420\uac83\uc774\uace0, \n    # \ub0a0\uac1c\uac00 2\uac1c\ub77c\uba74 T\uac00\uc544\ub2c8\uace0 \ub0a0\uac1c\uac00 3\uac1c\ub77c\uba74 \uadf8\ub0e5 \uadf8\uac12\uc744 \ub9ac\ud134\ud574\uc900\ub2e4.\n    wings = 4\n    MIN = int(1e9)\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if wings == 2:\n            return 0\n        #\uaf2c\ub2e4\ub9ac\ubd80\ubd84\uc774 \ub9f5\uc744 \ubc97\uc5b4\ub09c\ub2e4? \uadf8\ubc29\ud5a5 \ub0a0\uac1c\ub294 \uc5c6\ub294\uac83.\n        if not (0<=nx<N and 0<=ny<M):\n            wings -= 1\n            continue\n        #\ubaa8\ub4e0 \ub0a0\uac1c \uac12\ub4e4\uc744 \ub354\ud574\uc900\ub2e4.    \n        result+= board[nx][ny]\n        if MIN > board[nx][ny]:\n            MIN = board[nx][ny]\n    #\ubaa8\ub4e0\ubc29\ud5a5 \ub0a0\uac1c\uac00 \uc0b4\uc544\uc788\ub2e8 \ub9d0\uc774\ubbc0\ub85c 4\ubc29\ud5a5\uc758 \ub0a0\uac1c\uc911 \uc81c\uc77c \uc791\uc740\ub0a0\uac1c \ud558\ub098\ub97c \uc798\ub77c\uc900\ub2e4.\n    if wings == 4:\n        result -= MIN\n    return result\n\n#T\uc790\ub97c \uc81c\uc678\ud55c \ube14\ub85d\uc740 dfs\ub97c \uc774\uc6a9\ud574 \uacc4\uc0b0\ndef dfs(x,y,val,depth):\n    global answer\n    if depth == 4:\n        answer = max(answer,val)\n        return\n    \n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < N and 0 <= ny < M:\n            if check[nx][ny]:\n                #4\uac1c\ube14\ub7ed\uac12\uc774 \uc774\uc804 \ube14\ub7ed\uac12\uc774\uba74 \uc548\ub418\ub2c8\uae4c false \ud574\uc8fc\uace0\n                check[nx][ny] = False\n                dfs(nx,ny,val+board[nx][ny],depth+1)\n                #\ub05d\ub09c\ud6c4 \ub2e4\uc2dc \ubc29\ubb38\uac00\ub2a5\ucc98\ub9ac\ud574\uc90c.\n                check[nx][ny] = True\n\n\nfor i in range(N):\n    for j in range(M):\n        #\uc2dc\uc791\ube14\ub85d\uc744 \ub2e4\uc2dc\ubc29\ubb38\ud558\uba74\uc548\ub428\n        check[i][j] = False\n        dfs(i,j,board[i][j],1)\n        #\ub05d\ub09c\ud6c4 \ub2e4\uc2dc \ubc29\ubb38\uac00\ub2a5\ucc98\ub9ac\n        check[i][j] = True\n\n        temp = block_T(i,j)\n        answer = max(answer,temp)\n\n\nprint(answer)"}
{"topic": "brute_force", "problem": "14620", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/3b62a8a262a34102b1361a464e12f0c9\n\nimport sys\nfrom itertools import combinations\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\nflower = []\nMIN = 1e9\nnx = [-1, 0, 1, 0]\nny = [0, -1, 0, 1]\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nfor i in range(1, N-1):\n    for j in range(1, N-1):\n        flower.append((i,j))\nfor flower_comb in combinations(flower, 3):\n    temp = 0\n    flag = 0\n    visited = [[0 for i in range(N)] for j in range(N)]\n    for flo in flower_comb:\n        if visited[flo[0]][flo[1]] == 0:\n            visited[flo[0]][flo[1]]\n            temp += arr[flo[0]][flo[1]]\n        else:\n            flag = 1\n            break\n        for i in range(4):\n            dx = flo[0] + nx[i]\n            dy = flo[1] + ny[i]\n            if visited[dx][dy] == 0:\n                visited[dx][dy] = 1\n                temp += arr[dx][dy]\n            else:\n                flag = 1\n                break\n    if not flag:\n        MIN = min(MIN, temp)\nprint(MIN)"}
{"topic": "brute_force", "problem": "15661", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/946d652cbd7a4361aaeff5ff1f2612d5\nimport sys\nfrom itertools import combinations\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\nnum = [i for i in range(N)]\nMIN = 1e9\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\ncomb_list = list(combinations(num, N//2))\nfor comb in comb_list:\n    start = 0\n    link = 0\n    remain = [i for i in range(N) if i not in comb]\n    for com in combinations(comb, 2):\n        start += arr[com[0]][com[1]]\n    for ar in combinations(remain, 2):\n        link += arr[ar[0]][ar[1]]\n    MIN = min(MIN, abs(start - link))\nprint(MIN)"}
{"topic": "brute_force", "problem": "17471", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/f23ea6f1ea594b6f9c8100fd1ef41633\n\nimport sys\nfrom itertools import combinations\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x, ar):\n    global ct\n    ct += pop[x]\n    visited[x] = 1\n    for i in range(1, N+1):\n        if i in arr[x] and visited[i] == 0 and i in ar:\n            visited[i] = 1\n            DFS(i, ar)\n    return ct\nN = int(input())\npop = list(map(int, input().split()))\npop.insert(0,0)\narr = [[] for i in range(N+1)]\nstan = [i for i in range(1,N+1)]\nMIN = 1e9\nfor i in range(1, N+1):\n    t = list(map(int, input().split()))\n    arr[i] = t[1:]\nfor i in range(1, N):\n    comb_list = list(combinations(stan, i))\n    for comb in comb_list:\n        visited = [0] * (N+1)\n        remain = [j for j in range(1,N+1) if j not in comb]\n        ct = 0\n        first = DFS(comb[0], comb)\n        ct = 0\n        second = DFS(remain[0], remain)\n        if visited.count(1) == N:\n            MIN = min(MIN, abs(first - second))\nif MIN == 1e9:\n    print('-1')\nelse:\n    print(MIN)"}
{"topic": "brute_force", "problem": "17626", "code": "# Authored by : gusdn3477\n# Co-authored by : tony9402\n# Link : http://boj.kr/816fdae98bec4a4f95a3fb44fd2f348f\nimport sys\nfrom math import sqrt\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef solve(N):\n    ret = 4\n    for a in range(1, sqrtN + 1):\n        if a * a == N:\n            ret = 1\n        \n        if ret == 1:\n            break\n        for b in range(1, sqrtN + 1):\n            if a * a + b * b  > N:\n                break\n            if a * a + b * b == N:\n                ret = 2\n\n            if ret <= 2:\n                break\n            for c in range(1, sqrtN + 1):\n                if a * a + b * b + c * c  > N:\n                    break\n                if a * a + b * b + c * c == N:\n                    ret = 3\n                    break\n\n    return ret\n\nN = int(input())\nsqrtN = int(sqrt(N))\nprint(solve(N))"}
{"topic": "brute_force", "problem": "18511", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/b56f91d1e33b44c2b24d57cd460eace2\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef backTracking(num):\n    global ans\n    if num > N:\n        return\n    ans = max(ans,num)\n    for i in K:\n        num = num * 10 + i\n        backTracking(num)\n        num = (num - i) // 10\n\nN, C = map(int, input().split())\nK = list(map(int, input().split()))\nans = 0\nbackTracking(0)\nprint(ans)"}
{"topic": "brute_force", "problem": "18808", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/81188121d759417d8f72e6a00476ce7c\n\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef rotate(arr, N):\n    result  = []\n    i_array = []\n    j_array = []\n    for item in arr:\n        i,j = item\n        i_array.append(j)\n        j_array.append(N-i-1)\n        result.append((j,N-i-1))\n    i_min = min(i_array)\n    j_min = min(j_array)\n    real_result = []\n    for item in result:\n        y,x = item\n        real_result.append((y-i_min,x-j_min))\n    return real_result\n\ndef check(n,m,arr,visit):\n    for i in range(n):\n        for j in range(m):\n            chk = True\n            temp = set()\n            for y,x in arr:\n                if y+i<n and x+j<m:\n                    if (y+i,x+j) in visit:\n                        chk = False\n                        break\n                    else:\n                        temp.add((y+i,x+j))\n                else:\n                    chk = False\n                    break\n            if chk:\n                return (True, temp)\n    return (False, None)\n                \nn, m, k = map(int, input().split())\nvisit = set()\nsticker = [] # (max \ud06c\uae30, \uc2a4\ud2f0\ucee4\ub4e4)\nfor c in range(k):\n    a, b = map(int, input().split())\n    sticker.append([0, []])\n    sticker[c][0] = max(a, b)\n    for i in range(a):\n        li = list(map(int, input().split()))\n        for j in range(b):\n            if li[j] == 1:\n                sticker[c][1].append((i, j))\n\nq = deque(sticker)\ncnt = 0\nwhile q:\n    if cnt == 4:\n        q.popleft()\n        cnt = 0\n        continue\n\n    current_sticker = q.popleft()\n    M, s = current_sticker\n    chk, li = check(n, m, s, visit)\n    if chk:\n        for i in li:\n            visit.add(i)\n        cnt=0\n        continue\n    else:\n        q.appendleft((M, rotate(s, M)))\n        cnt+=1\n\nprint(len(visit))"}
{"topic": "brute_force", "problem": "1969", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/c08f03602f524dc3822344da70739929\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr = []\nword = ''\ndist = 0\n\nfor i in range(N):\n    arr.append(input())\n\nfor i in range(M):\n    dic = {}\n    for j in range(N):\n        if arr[j][i] not in dic:\n            dic[arr[j][i]] = 1\n\n        else:\n            dic[arr[j][i]] += 1\n\n    ans = list(dic.items())\n    ans.sort(key = lambda x : (-x[1], x[0]))\n    word += ans[0][0]\n    dist += N - ans[0][1]\n\nprint(word)\nprint(dist)"}
{"topic": "brute_force", "problem": "21278", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/b52664ec81c3495db8b8091cd12f95d5\n\nfrom itertools import combinations\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\ngraph = {i: [] for i in range(1, N+1)}\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\ndef bfs(start1, start2, graph, N):\n    result = [99999999 for _ in range(N+1)]\n    result[0] = 0 # \uc778\ub371\uc2a4 0\uc740 \ub354\ubbf8\n    result[start1] = 0\n    result[start2] = 0\n    q = deque()\n    q.append((start1, 0))\n    q.append((start2, 0))\n    visit = set()\n    visit.add(start1)\n    visit.add(start2)\n    while q:\n        if len(visit) == N:\n            break\n        cur, dist = q.popleft()\n        for nxt in graph[cur]:\n            if nxt in visit: continue\n            visit.add(nxt)\n            q.append((nxt, dist + 1))\n            result[nxt] = dist + 1\n    return sum(result)\n\n\ndef solution(graph, N):\n    candidate = [i for i in range(1, N+1)]\n    answer = 99999999\n    fin_store1 = N+1\n    fin_store2 = N+1\n    for comb in combinations(candidate, 2):\n        store1, store2 = comb\n        result = bfs(store1, store2, graph, N)\n        if answer > result:\n            fin_store1 = store1\n            fin_store2 = store2\n            answer = result\n        elif answer == result:\n            if fin_store1 > store1:\n                fin_store1 = store1\n                fin_store2 = store2\n                answer = result\n            elif fin_store1 == store1:\n                if fin_store2 > store2:\n                    fin_store1 = store1\n                    fin_store2 = store2\n                    answer = result\n\n    return ' '.join(map(str, [fin_store1, fin_store2, answer * 2]))\n\nprint(solution(graph, N))"}
{"topic": "brute_force", "problem": "21315", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/9857ec1183e144acb9d49a7316bdf595\n\nfrom itertools import permutations\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef shuffle(card1, card2, card3):\n    card = card2 + card1 + card3\n    if len(card2) > 1:\n        return shuffle(card2[:len(card2)//2] + card1, card2[len(card2)//2:], card3)\n    else:\n        card = card2 + card1 + card3\n        return card\n\nn = int(input())\ncorrect_cards = list(map(int,input().split()))\nanswer = []\norders = [i for i in range(1, 10)] + [i for i in range(1, 10)]\n\nfor perm in permutations(orders, 2):\n    if 2 ** max(perm)>=n: \n        continue\n    cards = [i for i in range(1, n+1)]\n    for k in perm:\n        card1 = []\n        card2 = cards[n-(2**k):]\n        card3 = cards[:n-(2**k)]\n        cards = shuffle(card1, card2, card3)\n    \n    if cards == correct_cards:\n        answer = perm\n        break\n\nprint(' '.join(map(str, answer)))"}
{"topic": "brute_force", "problem": "2309", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/be3b4fb036844cb390e1f7a818471cde\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef findIndex(ans):\n\n    for i in range(9):\n        for j in range(i+1,9):\n            if arr[i] + arr[j] == ans:\n                return (arr[i], arr[j])\n\narr = []\nfor i in range(9):\n    arr.append(int(input()))\n\nans = sum(arr) - 100\nfirst, second = findIndex(ans)\narr.remove(first)\narr.remove(second)\narr.sort()\n\nfor i in arr:\n    print(i)"}
{"topic": "brute_force", "problem": "2503", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/4e0ef6629dd34e659f1b3d6d470ccc41\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef isDifferentAndNotZero(num):\n    if num[0] == num[1] or num[0] == num[2] or num[1] == num[2]:\n        return False\n    if '0' in num:\n        return False\n    return True\n\ndef baseball(num):\n    flag = 0\n    for i in range(N):\n        strike, ball = 0,0\n        for j in range(3):\n            if num[j] == arr[i][0][j]:\n                strike += 1\n        if num[0] == arr[i][0][1] or num[0] == arr[i][0][2]:\n            ball += 1\n        if num[1] == arr[i][0][0] or num[1] == arr[i][0][2]:\n            ball += 1\n        if num[2] == arr[i][0][0] or num[2] == arr[i][0][1]:\n            ball += 1\n        if strike == arr[i][1] and ball == arr[i][2]:\n            flag += 1\n    if flag == N:\n        return True\n    else:\n        return False\n\nN = int(input())\narr = []\npoc = []\nans = 0\n\nfor i in range(N):\n    num, strike, ball = input().split()\n    arr.append([num, int(strike), int(ball)])\n\nfor i in range(123,988):\n    if isDifferentAndNotZero(str(i)) and baseball(str(i)):\n        ans += 1\nprint(ans)"}
{"topic": "brute_force", "problem": "2798", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/29a558ec778348f589fad5c627187638\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nMAX = 0\narr = list(map(int, input().split()))\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for z in range(j+1,len(arr)):\n            if arr[i] + arr[j] + arr[z] <= M:\n                MAX = max(MAX, arr[i] + arr[j] + arr[z])\nprint(MAX)"}
{"topic": "brute_force", "problem": "4096", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/b554cc74d1a24c9e9306775641121065\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\nwhile True:\n    N = input()\n    length = len(N)\n    ct = 0\n    if N == '0':\n        break\n    elif isPalindrome(N):\n        print(0)\n    else:\n        while True:\n            if isPalindrome(N):\n                print(ct)\n                break\n            N = str(int(N)+1)\n            N = '0' * (length - len(N)) + N\n            ct += 1"}
{"topic": "brute_force", "problem": "4690", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/fb355cbf95324465b430f4423567a2c4\nfor a in range(2, 100 + 1):\n    for b in range(2, a):\n        for c in range(b, a):\n            for d in range(c, a):\n                if a ** 3 == b ** 3 + c ** 3 + d ** 3:\n                    print(f'Cube = {a}, Triple = ({b},{c},{d})')"}
{"topic": "brute_force", "problem": "5568", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/0dd94001579e4341b3ea06ed523d2cba\nimport sys\nfrom itertools import permutations\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\narr = []\nans = set()\nk = int(input())\nfor i in range(n):\n    arr.append(input())\nper = list(permutations(arr, k))\nfor i in range(len(per)):\n    st = ''\n    for j in range(len(per[i])):\n        st += per[i][j]\n    ans.add(st)\nans = list(ans)\nprint(len(ans))"}
{"topic": "brute_force", "problem": "7568", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/5540a61d3d364466bbe47e8c62beaedb\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\n\nfor i in range(N):\n    weight, height = map(int, input().split())\n    arr.append([weight,height,1])\n\nfor i in range(N):\n    for j in range(N):\n        if arr[i][0] < arr[j][0] and arr[i][1] < arr[j][1]:\n            arr[i][2] += 1\n\nfor i in range(len(arr)):\n    print(arr[i][2], end=' ')"}
{"topic": "brute_force", "problem": "9094", "code": "# Authored by : gusdn3477\n# Co-authored by : tony9402\n# Link : http://boj.kr/ea96af96027540dcb1daa3b65e849eab\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nT = int(input())\nfor i in range(T):\n    n,m = map(int, input().split())\n    ct = 0\n    for a in range(1,n):\n        for b in range(a+1,n):\n            if (a * a + b * b + m) % (a*b) == 0:\n                ct += 1\n\n    print(ct)"}
{"topic": "data_structure", "problem": "1021", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/71a5091026cf4a1b836dc46c812aeaca\nimport sys\nfrom collections import deque\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr = list(map(int, input().split()))\nqueue = deque([i for i in range(1,N+1)])\nans = 0\nfor i in arr:\n    idx = queue.index(i)\n    if idx == 0:\n        queue.popleft()\n    else:\n        if idx <= len(queue)//2:\n            queue.rotate(-idx)\n            queue.popleft()\n            ans += idx\n        else:\n            queue.rotate(len(queue) - idx)\n            ans += len(queue) - idx\n            queue.popleft()\nprint(ans)"}
{"topic": "data_structure", "problem": "10828", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/ab416f0794fc41cabc3d9ed46db29f60\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\n\nstack = [] \n\nfor i in range(N):\n    cmd = input().split()\n    X = 0\n    if len(cmd) == 2:\n        X = cmd[1]\n    cmd = cmd[0]\n\n    if cmd == \"push\":\n        stack.append(X)\n    elif cmd == \"pop\":\n        if len(stack) == 0:\n            print(-1)\n        else:\n            print(stack[-1])\n            stack.pop(-1)\n    elif cmd == \"size\":\n        print(len(stack))\n    elif cmd == \"empty\":\n        print(0 if len(stack) else 1)\n    elif cmd == \"top\":\n        if len(stack) == 0:\n            print(-1)\n        else:\n            print(stack[-1])"}
{"topic": "data_structure", "problem": "10845", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/89f5e4e54afb441bbf218b5e68a4160d\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nqueue = deque()\nfor i in range(N):\n    command = input().split()\n    if command[0] == \"push\":\n        queue.append(command[1])\n    elif command[0] == \"pop\":\n        if queue:\n            print(queue.popleft())\n        else:\n            print(-1)\n    elif command[0] == \"size\":\n        print(len(queue))\n    elif command[0] == \"empty\":\n        if not queue:\n            print(1)\n        else:\n            print(0)\n    elif command[0] == \"front\":\n        if queue:\n            print(queue[0])\n        else:\n            print(-1)\n    elif command[0] == \"back\":\n        if queue:\n            print(queue[-1])\n        else:\n            print(-1)"}
{"topic": "data_structure", "problem": "10866", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/1cf1ea352dba44daa9768b67c7f109e9\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nqueue = deque()\nN = int(input())\nfor i in range(N):\n    command = input().split()\n    if command[0] == 'push_front':\n        queue.appendleft(command[1])\n    elif command[0] == 'push_back':\n        queue.append(command[1])\n    elif command[0] == 'pop_front':\n        if queue:\n            print(queue.popleft())\n        else:\n            print(-1)\n    elif command[0] == 'pop_back':\n        if queue:\n            print(queue.pop())\n        else:\n            print(-1)\n    elif command[0] == 'size':\n        print(len(queue))\n    elif command[0] == 'empty':\n        if not queue:\n            print(1)\n        else:\n            print(0)\n    elif command[0] == 'front':\n        if queue:\n            print(queue[0])\n        else:\n            print(-1)\n    elif command[0] == 'back':\n        if queue:\n            print(queue[-1])\n        else:\n            print(-1)"}
{"topic": "data_structure", "problem": "1158", "code": "# Authored by : klm03025\n# Co-authored by : -\n# Link : http://boj.kr/1306fa8a1c5a4f4cab631f833d92636a\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, K = map(int, input().split())\n_list = []\nq = deque([i + 1 for i in range(N)])\n\nwhile len(q) != 0:\n    q.rotate(-K)\n    _list.append(q.pop())\n\nprint('<' + ', '.join(map(str, _list)) + '>')"}
{"topic": "data_structure", "problem": "18258", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/6bf4491116ff480fab750a65591c134e\n\nimport sys\nfrom collections import deque\ndef input():\n    return sys.stdin.readline().rstrip()\n\nqueue = deque()\nN = int(input())\nfor i in range(N):\n    com = input().split()\n    if com[0] == 'push':\n        queue.append(com[1])\n    elif com[0] == 'pop':\n        if queue:\n            print(queue.popleft())\n        else:\n            print(-1)\n    elif com[0] == 'size':\n        print(len(queue))\n    elif com[0] == 'front':\n        if queue:\n            print(queue[0])\n        else:\n            print(-1)\n    elif com[0] == 'back':\n        if queue:\n            print(queue[-1])\n        else:\n            print(-1)\n    elif com[0] == 'empty':\n        if not queue:\n            print(1)\n        else:\n            print(0)"}
{"topic": "data_structure", "problem": "1935", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/db333837b5af4d84a2a5ba1dc83d2086\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = input()\noper = '+-*/'\ndic = {}\nstack = []\nnum = deque()\n\nfor i in range(N):\n    num.append(int(input()))\n\nfor i in arr:\n    if i not in dic and i not in oper:\n        dic[i] = num.popleft()\n\nfor i in arr:\n    if i not in oper:\n        stack.append(dic[i])\n    else:\n        if i == '+':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b+a)\n        elif i == '-':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b-a)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b*a)\n        else:\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b/a)\n\nprint(f\"{stack[0]:.2f}\")"}
{"topic": "data_structure", "problem": "1966", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/74b1e7adb56b425aa6644b3d2ea726e0\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nT = int(input())\nfor i in range(T):\n    queue = deque()\n    queue2 = deque()\n    ct = 1\n    N,M = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for j in range(len(arr)):\n        queue.append(arr[j])\n        queue2.append(j)\n    while True:\n        if queue[0] == max(queue):\n            if queue2[0] == M:\n                print(ct)\n                break\n            else:\n                queue.popleft()\n                queue2.popleft()\n                ct += 1\n        else:\n            queue.rotate(-1)\n            queue2.rotate(-1)"}
{"topic": "data_structure", "problem": "2164", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/3ad1b45ad3db4bf7b1bfc5227e1acd12\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nqueue = deque()\nN = int(input())\nfor i in range(1,N+1):\n    queue.append(i)\n\nwhile True:\n    a = queue.popleft()\n    if not queue:\n        print(a)\n        break\n    b = queue.popleft()\n    queue.append(b)"}
{"topic": "data_structure", "problem": "2346", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/71af42c3664749e48f8f0272c3c04fd2\nimport sys\nfrom collections import deque\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nqueue = deque(list(map(int, input().split())))\nqueue2 = deque([i for i in range(1,N+1)])\nwhile queue:\n    q = queue[0]\n    if q > 0:\n        queue.popleft()\n        queue.rotate(-q+1)\n        print(queue2.popleft())\n        queue2.rotate(-q+1)\n    else:\n        queue.popleft()\n        queue.rotate(-q)\n        print(queue2.popleft())\n        queue2.rotate(-q)"}
{"topic": "data_structure", "problem": "2504", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/a35de756ecf642b6b2e116f14ffd6093\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ns = input()\nstack = []\n\n# Check Bracket\nfor ch in s:\n    if ch == '(':\n        stack.append('(')\n    elif ch == '[':\n        stack.append('[')\n    elif ch == ')':\n        if stack and stack[-1] == '(':\n            stack.pop(-1)\n        else:\n            print(0)\n            exit(0)\n    else:\n        if stack and stack[-1] == '[':\n            stack.pop(-1)\n        else:\n            print(0)\n            exit(0)\n\nif stack:\n    print(0)\n    exit(0)\n\n# [open bracket] + Integer + Integer => [open bracket] + Integer\n# compress (add) Integers\ndef compress():\n    # Integer\ub97c \ud558\ub098\ub85c \ud569\uccd0\uc57c \ud558\ub2c8\uae50 \uae38\uc774\uac00 2 \uc774\uc0c1\uc774\uc5b4\uc57c \ud568.\n    while len(stack) > 1:\n        # \ub450 \uac1c\uc758 \uac12\uc774 \ubb34\uc870\uac74 Integer\uc774\uc5b4\uc57c \ud558\ubbc0\ub85c\n        # Integer\uba74 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 None\uc73c\ub85c \ub418\uc5b4 \uc788\uc74c\n        a, integer1 = stack[-1]\n        b, integer2 = stack[-2]\n        if a or b:\n            break\n        stack.pop()\n        stack.pop()\n        stack.append((None, integer1 + integer2))\n\nfor ch in s:\n    # open bracket -> append ( open bracket, ~ )\n    if ch == '(':\n        stack.append(('(', 2))\n    elif ch == '[':\n        stack.append(('[', 3))\n    elif ch == ')' or ch == ']': # Must Be len(stack) \u2265 1\n        last1, last2 = stack.pop()\n        # Case 1 : ~~ open bracket\n        if last1 != None:\n            stack.append((None, last2))\n        # Case 2 : ~~ open bracket, Integer,\n        else:\n            a, b = stack.pop()\n            stack.append((None, last2 * b))\n        compress()\n\nprint(stack[-1][1])"}
{"topic": "data_structure", "problem": "2800", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/9908832547364dfd87342eb0a2a873ce\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ns = input()\nN = len(s)\n\nindex = [ -1 for _ in range(N) ]\nstack = []\ncurrent_index = 0\n\n# \uc62c\ubc14\ub978 \uad04\ud638\ub9cc \uc8fc\uc5b4\uc9c4\ub2e4. \uac01 \uad04\ud638 \uc30d\uc5d0 \ucc28\ub840\ub300\ub85c index\ub97c \ubd99\uc5ec\uc8fc\uace0 \uae30\ub85d\ud558\uc790.\nfor idx, ch in enumerate(s):\n    if ch == '(':\n        stack.append(current_index)\n        index[idx] = current_index\n        current_index += 1\n    elif ch == ')':\n        index[idx] = stack.pop()\n\n# \uac01 \uad04\ud638\uc5d0 \ubc88\ud638\ub97c \uae30\ub85d\ud574\ub1a8\ub2e4. \uc774\uc81c \uc7ac\uadc0\ub97c \ub3cc\uc544 \uad04\ud638\uc30d\uc744 \ubf51\uc790.\nanswer = [] # \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uac83\uc744 \uc800\uc7a5 \ud6c4 \uc815\ub82c \ud6c4 \ucd9c\ub825\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\n\n# current_index ==> bracket count\nchoose = [ 0 for _ in range(current_index) ]\n\n# cnt -> bracket index \ubc88\ud638\ndef func(cnt): \n    if cnt == current_index:\n        erase_bracket_count = sum(choose)\n        if erase_bracket_count == 0:\n            return\n\n        string = \"\"\n        for idx, ch in enumerate(s):\n            # index[idx] == -1 \uc778 \uacbd\uc6b0 (\uad04\ud638\uac00 \uc544\ub2c8\ubbc0\ub85c \ucd94\uac00)\n            # \ub9cc\uc57d -1\uc774\uba74 \ub4a4\uc5d0 \uc870\uac74\ubb38\uc774 \uc2e4\ud589 \uc548\ub428\n            if index[idx] == -1 or choose[index[idx]] == 0:\n                string += ch\n\n        answer.append(string)\n        return\n\n    choose[cnt] = 1 # \ud574\ub2f9 \uad04\ud638\uc30d\uc744 \uc9c0\uc6b4 \uacbd\uc6b0\n    func(cnt + 1)\n    choose[cnt] = 0 # \ud574\ub2f9 \uad04\ud638\uc30d\uc744 \uc9c0\uc6b0\uc9c0 \uc54a\uc740 \uacbd\uc6b0\n    func(cnt + 1)\n\n# Run \nfunc(0)\n# \uc815\ub2f5 \uc911\uc5d0 \uc911\ubcf5\uc774 \uc788\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc911\ubcf5 \uc81c\uac70\nanswer = sorted(set(answer))\nprint('\\n'.join(answer))"}
{"topic": "data_structure", "problem": "3986", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/25fcff12eee34fb6a0f0d4023cac4e4d\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nans = 0\nfor i in range(N):\n    stack = []\n    a = input()\n    for i in a:\n        if not stack:\n            stack.append(i)\n        else:\n            if stack[-1] == i:\n                stack.pop()\n            else:\n                stack.append(i)\n    if not stack:\n        ans += 1\nprint(ans)"}
{"topic": "data_structure", "problem": "5397", "code": "# // Authored by : chj3748\n# // Co-authored by : -\n# // Link : http://boj.kr/471d69f455a544769c6c2fa7199442d1\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nT = int(input())\nfor test in range(T):\n    answer_l = deque()\n    answer_r = deque()\n    for string in input():\n        if string == '<':\n            if answer_l:\n                temp = answer_l.pop()\n                answer_r.appendleft(temp)\n        elif string == '>':\n            if answer_r:\n                temp = answer_r.popleft()\n                answer_l.append(temp)\n        elif string == '-':\n            if answer_l:\n                answer_l.pop()\n        else:\n            answer_l.append(string)\n    print(''.join(answer_l + answer_r))"}
{"topic": "data_structure", "problem": "5430", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/cc59c57fb1534ac4831b7f44f87831be\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nt = int(input())\nfor _ in range(t):\n    oper = str(input())\n    n = int(input())\n    lst = str(input())[1:-1].split(',')\n    if not lst[0].isdigit():\n        lst = [] #\ube48 list\uac00 \ub4e4\uc5b4\uc62c \uacbd\uc6b0 \ub530\ub85c \ucc98\ub9ac\n\n    l_p, r_p, front = 0, len(lst), True\n    for p in oper:\n        if p == 'R': #D operation\uc774 \uc77c\uc5b4\ub0a0 \uc704\uce58 \uc124\uc815\n            front = not front\n        else: #D operation \uc218\ud589\n            if front: #\uc55e\uc5d0\uc11c \uc81c\uac70\n                l_p += 1\n            else: #\ub4a4\uc5d0\uc11c \uc81c\uac70\n                r_p -= 1\n        if l_p > r_p: #\uc9c0\uc6b8 \uc218 \uc5c6\ub294\ub370 \uc9c0\uc6b4 \uacbd\uc6b0\n            print('error')\n            break\n    if l_p <= r_p:\n        if front:\n            sol = lst[l_p:r_p]\n        else:\n            sol = list(reversed(lst[l_p:r_p]))\n        print('['+','.join(sol)+']') #\ucd9c\ub825 \ud615\uc2dd \ub9de\ucd94\uae30"}
{"topic": "data_structure", "problem": "9012", "code": "# Authored by : klm03025\n# Co-authored by : -\n# Link : http://boj.kr/b57f1dad96a946e48e0679872d97d024\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nresult = \"\"\n\nfor i in range(N):\n    testcase = input()\n    cnt = 0\n    for c in testcase:\n        cnt += 1 if c == '(' else -1\n        if cnt < 0:\n            result += \"NO\\n\"\n            break\n    else:\n        result += \"YES\\n\" if cnt == 0 else \"NO\\n\"\n\nprint(result)"}
{"topic": "data_structure2", "problem": "10546", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/bb59bafb8ef04d69a5ab5ade6d7cfeb9\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\ndic = {}\nfor i in range(N):\n    name = input()\n    dic[name] = dic.get(name, 0) + 1\n\nfor i in range(N-1):\n    name = input()\n    dic[name] -= 1\n\ndic_list = list(dic.items())\ndic_list.sort(key = lambda x : (-x[1], x[0]))\nprint(dic_list[0][0])"}
{"topic": "data_structure2", "problem": "11279", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/2b2600bda1c447b7b7f2c2399b167716\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nheap = []\nfor i in range(N):\n    a = int(input())\n    if a == 0:\n        if heap:\n            print(-heapq.heappop(heap))\n        else:\n            print(0)\n    heapq.heappush(heap, -a)"}
{"topic": "data_structure2", "problem": "11286", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/29a558ec778348f589fad5c627187638\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nheap = []\nfor i in range(N):\n    x = int(input())\n    if x == 0:\n        if heap:\n            print(heapq.heappop(heap)[1])\n        else:\n            print(0)\n    else:\n        heapq.heappush(heap, [abs(x), x])"}
{"topic": "data_structure2", "problem": "1269", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/73b320e09628425c8d29b3c81287a865\nimport sys\nfrom collections import defaultdict\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nlen_a, len_b = map(int, input().split())\ndict_a = defaultdict(int)\n\nfor number in map(int, input().split()):\n    dict_a[number] = 1\n\ncnt = 0\n\nfor number in map(int, input().split()):\n    if dict_a[number]:\n        cnt += 1\n\nanswer = (len_a - cnt) + (len_b - cnt)\nprint(answer)"}
{"topic": "data_structure2", "problem": "1302", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/8adc986ae26b461eadd65abdff3cfba9\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nbook = {}\nfor i in range(N):\n    name = input()\n    if name not in book:\n        book[name] = 1\n    else:\n        book[name] += 1\n\nbook = list(book.items())\nbook.sort(key = lambda x : (-x[1],x[0]))\nprint(book[0][0])"}
{"topic": "data_structure2", "problem": "14425", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/efd53a96cfd04ca9ab21018162c3084d\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nans = 0\ndic = {}\nfor i in range(N):\n    a = input()\n    dic[a] = 1\nfor i in range(M):\n    a = input()\n    if a in dic:\n        ans += 1\nprint(ans)"}
{"topic": "data_structure2", "problem": "1927", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/5d73f6bad59b42a58688435c855b9580\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nheap = []\n\nfor i in range(N):\n    x = int(input())\n    if x == 0:\n        if not heap:\n            print(0)\n        else:\n            print(heapq.heappop(heap))\n    else:\n        heapq.heappush(heap,x)"}
{"topic": "data_structure2", "problem": "21942", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/16de6b69c0ca419a908289ee440a407a\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef calculate_days_per_month():\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    days = [0]\n    for month, day in month_days.items():\n        days.append(days[month-1] + day)\n    return days\n\nmonth_days = calculate_days_per_month()\n\ndef change_str(_str):\n    date, time, item, person = _str.split()\n    _, month, day = map(int, date.split('-')) # \ub144\ub3c4 \ud544\uc694\uc5c6\uc74c\n    hour, minute = map(int, time.split(':'))\n    return person, item, (month_days[month-1] + day) * 24 * 60 + hour * 60 + minute\n\ndef solution(info, deadline_time, F):\n    dic = {}\n    people = {} # \ubc8c\uae08 \ub0bc \uc0ac\ub78c\ub4e4\n    for data in info:\n        result = -1\n        person, item, time = change_str(data)\n        if person not in dic:\n            dic[person] = {}\n        if item in dic[person]:\n            result = time - dic[person].pop(item)\n        else:\n            dic[person][item] = time\n        if result > deadline_time:\n            if person not in people:\n                people[person] = 0\n            people[person] += (result - deadline_time) * F\n    if people:\n        people = sorted(people.items(), key = lambda x: x[0])\n        for person, pay in people:\n            print('{} {}'.format(person, pay))\n    else:\n        print(-1)\n\nN, L, F = input().split()\nN, F = int(N), int(F)\nday, time = L.split('/')\nday = int(day)\nhour, minute = map(int, time.split(':'))\ndeadline_time = day*24*60 + hour*60 + minute\ninfo = []\nfor _ in range(N):\n    _str = input()\n    info.append(_str)\n\nsolution(info, deadline_time, F)"}
{"topic": "data_structure2", "problem": "7662", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/2eb814a8afac4ceab99cbb89db78a2c6\nimport sys\nimport heapq\nfrom collections import defaultdict\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nfor T in range(int(input())):\n    max_q = []\n    min_q = []\n    total_ele_cnt = 0\n    elements_cnt = defaultdict(int)\n    for _ in range(int(input())):\n        operator, number = input().split()\n        if operator == 'I':\n            number = int(number)\n            heapq.heappush(max_q, -number)\n            heapq.heappush(min_q, number)\n            elements_cnt[number] += 1\n            total_ele_cnt += 1\n        else:\n            if total_ele_cnt > 0:\n                if number == '1':\n                    while True:\n                        del_num = -heapq.heappop(max_q)\n                        if elements_cnt[del_num] != 0:\n                            elements_cnt[del_num] -= 1\n                            break\n                else:\n                    while True:\n                        del_num = heapq.heappop(min_q)\n                        if elements_cnt[del_num] != 0:\n                            elements_cnt[del_num] -= 1\n                            break\n                total_ele_cnt -= 1\n    if total_ele_cnt:\n        while True:\n            max_v = -heapq.heappop(max_q)\n            if elements_cnt[max_v] != 0:\n                break\n        while True:\n            min_v = heapq.heappop(min_q)\n            if elements_cnt[min_v] != 0:\n                break\n        print(max_v, min_v)\n    else:\n        print('EMPTY')"}
{"topic": "disjoint_set", "problem": "10775", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/30c745d5f3c547c28e95b5c9a76647c1\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nG = int(input())\nP = int(input())\ngates = list(range(G + 1))\n\ndef find_max(x):\n    if gates[x] != x:\n        gates[x] = find_max(gates[x])\n    return gates[x]\n\nanswer = 0\nfor _ in range(P):\n    plane = int(input())\n    gate_n = find_max(plane)\n    if gate_n == 0:\n        print(answer)\n        sys.exit(0)\n    answer += 1\n    gates[gate_n] = gates[gate_n - 1]\nprint(answer)"}
{"topic": "disjoint_set", "problem": "1717", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/69e732906ee9469bbd233ff0ed09bafb\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\ndis_set = [-1]*(n+1)\n\n#Disjoint set \uad00\ub828 \ud568\uc218\ndef upward(x, update_lst):\n    if dis_set[x] < 0: # \ud574\ub2f9 disjoint set\uc758 \ucd5c\uc0c1\ub2e8 root\ub97c \ucc3e\uc74c\n        return x\n    # x\uac00 root\uac00 \uc544\ub2c8\ub77c\uba74 update_lst\uc5d0 \ucd94\uac00\ud558\uace0 root\ub97c \ucc3e\uc544\uac10\n    update_lst.append(x)\n    return upward(dis_set[x], update_lst)\n\ndef find(x):\n    update_lst = [] # x\uac00 \uc18d\ud55c disjoint set\uc5d0\uc11c path compression\uc744 \uc704\ud574 root update\uac00 \ud544\uc694\ud55c node set\n    root = upward(x, update_lst) # x\uac00 \uc18d\ud55c disjoint set\uc758 root\n    for idx in update_lst: # Path compression\n        dis_set[idx] = root\n    return root\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n    if x_root != y_root: #\ub450 node\uc758 root\uac00 \ub2e4\ub974\ub2e4\uba74 -> \ud569\uccd0\uc57c \ud568\n        dis_set[y_root] = x_root\n\n\nfor _ in range(m):\n    oper, x, y = map(int, input().split())\n    if oper: # Check\n        if find(x) == find(y):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    else: # Union\n        union(x, y)"}
{"topic": "disjoint_set", "problem": "1976", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/a5ab5f0d45ed4e5584f0444987ba6c9a\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef union(x,y):\n    x = find_parent(x)\n    y = find_parent(y)\n    if x < y:\n        parent[y] = x\n    else:\n        parent[x] = y\n    \ndef find_parent(x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent[x])\n    return parent[x]\n\nN = int(input())\nM = int(input())\nparent = [i for i in range(N)]\narr = []\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nfor i in range(N):\n    for j in range(N):\n        if arr[i][j] == 1:\n            a = find_parent(i)\n            b = find_parent(j)\n            union(a,b)\nans = list(map(int, input().split()))\nflag = 0\nstandard = ans[0] - 1\nfor i in range(1, len(ans)):\n    if parent[standard] != parent[ans[i]-1]:\n        flag = 1\n        break\nif not flag:\n    print('YES')\nelse:\n    print('NO')"}
{"topic": "divide_and_conquer", "problem": "1802", "code": "# // Authored by : chj3748\n# // Co-authored by : -\n# // Link : http://boj.kr/28603d67d3014c79af724768c75865af\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef origami(start, end):\n    if start == end:\n        return True\n    mid = (start + end) // 2\n    sign = True\n    for i in range(start,mid):\n        if status[i] == status[end-i]:\n            sign = False\n            break\n    if sign:\n        return origami(start, mid - 1) and origami(mid + 1, end)\n    else:\n        return False\n\nfor T in range(int(input())):\n    status = list(map(int, input()))\n    if origami(0, len(status) - 1):\n        answer = 'YES'\n    else:\n        answer = 'NO'\n    print(answer)"}
{"topic": "dynamic_programming_1", "problem": "1010", "code": "# Authored by : gkgg123\n# Co-authored by : -\n# Link : https://www.acmicpc.net/source/share/6c285d8c7b9c44af971645f45c06d848\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nT = int(input())\n\ndp = [[0 for _ in range(31)] for _ in range(31)]\ndp[0][0] = 1\n\nfor num in range(1,31):\n    dp[num][0] = 1\n    for pick in range(1,31):        \n        dp[num][pick] = dp[num-1][pick] + dp[num-1][pick-1]\n\nfor _ in range(T):\n    N, M = map(int,input().split())\n    print(dp[M][N])"}
{"topic": "dynamic_programming_1", "problem": "11722", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/6b74718335d14780a6213de8a6b33e42\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = list(map(int, input().split()))\ndp = [1] * (N+1)\nfor i in range(N):\n    for j in range(i+1,N):\n        if arr[i] > arr[j]:\n            dp[j] = max(dp[i]+1, dp[j])\nprint(max(dp))"}
{"topic": "dynamic_programming_1", "problem": "11726", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/120bee5ac7444d88ad6686eecd957cd2\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nMOD = 10007\nN = int(input())\ndp = [0] * (N+2)\ndp[1] = 1\ndp[2] = 2\n\nfor i in range(3,N+1):\n    dp[i] = (dp[i-1] + dp[i-2]) % MOD\n\nprint(dp[N] % MOD)"}
{"topic": "dynamic_programming_1", "problem": "11727", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/db4e4b38ee3c4264b672837fa8fff893\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nMOD = 10007\nN = int(input())\ndp = [0] * (N+2)\ndp[1] = 1\ndp[2] = 3\n\nfor i in range(3,N+1):\n    dp[i] = (dp[i-1] + dp[i-2] * 2) % MOD\n\nprint(dp[N] % MOD)"}
{"topic": "dynamic_programming_1", "problem": "13699", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/84dabc0ec83940a9b2ee36e163f602c2\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nt = [0] * (n+4)\nt[0] = 1\nfor i in range(1,n+1):\n    for j in range(i):\n        t[i] += t[j] * t[i-1-j]\nprint(t[n])"}
{"topic": "dynamic_programming_1", "problem": "17626", "code": "# Authored by : osy0056\n# Co-authored by : -\n# Link : http://boj.kr/49cc21bd78694086b7b2864e8bc6fa69\nimport math\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\ndp = [0] * 50001\nINF = float('inf')\n\ndp[0] = 0\ndp[1] = 1\nfor i in range(2, n+1):\n    min_value = INF\n    for k in range(1, math.floor(math.sqrt(i)) + 1):\n        min_value = min(min_value, dp[i - k * k])\n    dp[i] = min_value + 1\nprint(dp[n])"}
{"topic": "dynamic_programming_1", "problem": "1890", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/73b9e168131842dd90aa2b02380cb0fa\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst = []\nfor _ in range(n):\n    lst.append(list(map(int, input().split())))\n\ndp = [[0]*n for _ in range(n)]\ndp[0][0] = 1\n\nfor i in range(n):\n    for j in range(n):\n        if lst[i][j] == 0:\n            continue\n        jump = lst[j][i]\n        \n        if j+jump < n:\n            dp[j+jump][i] += dp[j][i]\n        if i+jump < n:\n            dp[j][i+jump] += dp[j][i]\n\nprint(dp[-1][-1])"}
{"topic": "dynamic_programming_1", "problem": "19622", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/25c02a4ea33e493f9f1320165f1a5f95\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nmeetings = []\nfor _ in range(N):\n    meetings.append(list(map(int, input().split())))\ndp = [0] * N\n\nfor i in range(N):\n    if i == 0:\n        dp[0] = meetings[0][2]\n    elif i == 1:\n        dp[1] = max(meetings[1][2], dp[0])\n    else:\n        dp[i] = max(dp[i-2] + meetings[i][2], dp[i-1])\n\nprint(dp[N - 1])"}
{"topic": "dynamic_programming_1", "problem": "22869", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/18c501c01b3d4d91aa311c9c4d952e67\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split())\nrocks = list(map(int, input().split()))\ndp = [99999999] * n\ndp[0] = 0\nfor i in range(n-1):\n    if dp[i]>k:\n        continue\n    for j in range(i+1, n):\n        need = (j-i) * (1 + abs(rocks[i]-rocks[j]))\n        dp[j] = min(dp[j], need)\n        \nif dp[n-1]>k:\n    print('NO')\nelse:\n    print('YES')"}
{"topic": "dynamic_programming_1", "problem": "2294", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/4c2449f200e440f39d4ba8e1e71601b6\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split())\ncoin = set([int(input()) for _ in range(n)]) #\uc911\ubcf5 \ub3d9\uc804 \uc81c\uac70\ndp = [0]*(k+1)\n\nfor i in range(1, k+1):\n    possible = []\n    for c in coin:\n        if i-c >= 0 and dp[i-c] >= 0: # i-c\uc6d0 \uacbd\uc6b0\uc5d0 c\uc6d0 \ub3d9\uc804\uc744 \ucd94\uac00\ud574\uc11c i\uc6d0\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub294 \uacbd\uc6b0\n            possible.append(dp[i-c])\n    if possible:\n        dp[i] = min(possible) + 1 # optimal \uac12 + 1\n    else:\n        dp[i] = -1 #\ubd88\uac00\ub2a5!\n\nprint(dp[k])"}
{"topic": "dynamic_programming_1", "problem": "2579", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/3d9ff337b9bc420a975cf6783b298212\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst = [int(input()) for _ in range(n)]\n\nif n > 3:\n    dp = [lst[0], lst[0]+lst[1], max(lst[0], lst[1])+lst[2]] # 3\ubc88\uc9f8 \uce78\uae4c\uc9c0\ub294 \uba3c\uc800 \uad6c\ud558\uae30\n    for i in range(3, n):\n        next_max = max(dp[i-2], dp[i-3]+lst[i-1]) # max(2\uce78 \uc804\uc5d0\uc11c i\ubc88\uc9f8 \uacbd\uc6b0, 3\uce78-1\uce78 \uc804 \ubc1f\uace0 i\ubc88\uc9f8 \uc624\ub294 \uacbd\uc6b0)\n        dp.append(next_max+lst[i])\n    print(dp[-1])\nelse:\n    print(sum(lst)) #2\uce78 \uc774\ud558\uba74 \ubaa8\ub450 \ubc1f\ub294\uac8c \ucd5c\ub300"}
{"topic": "dynamic_programming_1", "problem": "9095", "code": "# Authored by : osy0056\n# Co-authored by : -\n# Link : http://boj.kr/da3d10e3ebc945349d778cb06444ffb1\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ntc = int(input())\n\ndp = [0] * 15\ndp[1] = 1\ndp[2] = 2\ndp[3] = 4\nfor i in range(4, 12):\n    dp[i] = dp[i - 3] + dp[i - 2] + dp[i - 1]\n\nfor _ in range(tc):\n    n = int(input())\n\n    print(dp[n])"}
{"topic": "dynamic_programming_1", "problem": "9461", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/369118cac2b14c75866029d361c95152\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef recursion(x):\n    if x == 1 or x == 2 or x == 3:\n        return 1\n    if dp[x] == 0:\n        dp[x] = recursion(x-2) + recursion(x-3)\n    return dp[x]\n\nT = int(input())\ndp = [0] * 101\nfor i in range(T):\n    N = int(input())\n    print(recursion(N))"}
{"topic": "dynamic_programming_1", "problem": "9465", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/39643867e537451a9ae49e16ec4f2f3f\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = [list(map(int, input().split())) for i in range(2)]\n    # \uc0c8\ub85c dp \ud589\ub82c \ub9cc\ub4e4 \ud544\uc694 \uc5c6\uc774 \uc2a4\ud2f0\ucee4 \uac12\uc774 \uc800\uc7a5\ub41c lst \ubc30\uc5f4\uc5d0\uc11c dp \uc218\ud589\n\n    if n > 1:\n        # \uacbd\uc6b0\uc758 \uc218 \uc624\uc9c1 1\uac1c\n        lst[0][1] += lst[1][0]\n        lst[1][1] += lst[0][0]\n\n    if n > 2:\n        for i in range(2, n):\n            #\ub300\uac01\uc120\uc5d0 \uc788\ub294 \uc2a4\ud2f0\ucee4\ub97c \uace0\ub97c \uc9c0, \uac70\uae30\uc11c \ud55c \uce78 \ub354 \ub5a8\uc5b4\uc838 \uc788\ub294 \uc2a4\ud2f0\ucee4\ub97c \uace0\ub97c \uc9c0 \uc120\ud0dd\n            lst[0][i] += max(lst[1][i-1], lst[1][i-2])\n            lst[1][i] += max(lst[0][i-1], lst[0][i-2])\n\n    print(max(lst[0][-1], lst[1][-1]))"}
{"topic": "dynamic_programming_1", "problem": "9655", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/f4bdc1e4d3f34003a1080645069b0ee7\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndp = ['' for _ in range(1001)]\ndp[1] = 'SK'\n\nfor i in range(1,1000):\n    if dp[i]==\"SK\":\n        if dp[i+1]=='':\n            dp[i+1] = 'CY'\n        if i+3<1000:\n            dp[i+3] = 'CY'\n    elif dp[i]=='CY':\n        if dp[i+1]=='':\n            dp[i+1] = 'SK'\n        if i+3<1000:\n            dp[i+3] = 'SK'\n\nprint(dp[int(input())])"}
{"topic": "dynamic_programming_2", "problem": "11909", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/a7949813f6e74a918f1f18b458ea5f8c\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ninf = float('inf')\nn = int(input())\nprison = [list(map(int, input().split())) for _ in range(n)]\ndp = [[inf] * n for _ in range(n)]\ndp[0][0] = 0\ndirx = [1, 0]\ndiry = [0, 1]\n\nq = deque()\nq.append((0, 0))\nwhile q:\n    x, y = q.popleft()\n    for dx, dy in zip(dirx, diry):\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < n and 0 <= ny < n:\n            cost = prison[nx][ny] - prison[x][y] + 1\n            if cost < 1:\n                cost = 0\n            if dp[nx][ny] > dp[x][y] + cost:\n                q.append((nx, ny))\n                dp[nx][ny] = dp[x][y] + cost\n\nprint(dp[n - 1][n - 1])"}
{"topic": "dynamic_programming_2", "problem": "11985", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/f293bc24e6e347dba7b5aa08836171fe\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M, K = map(int, input().split())\noranges = []\ninf = float('inf')\ndp = [inf] * N\ndp[0] = K\nfor idx in range(N):\n    oranges.append(int(input()))\n    if idx > 0:\n        max_size = oranges[idx]\n        min_size = oranges[idx]\n        for j in range(M):\n            left_idx = idx - j\n            if left_idx < 0:\n                break\n            if max_size < oranges[left_idx]:\n                max_size = oranges[left_idx]\n            if min_size > oranges[left_idx]:\n                min_size = oranges[left_idx]\n            if left_idx - 1 >= 0:\n                temp = dp[left_idx - 1] + K + (max_size - min_size) * (j + 1)\n            else:\n                temp = K + (max_size - min_size) * (j + 1)\n            if dp[idx] > temp:\n                dp[idx] = temp\n\nprint(dp[N - 1])"}
{"topic": "dynamic_programming_2", "problem": "14567", "code": "# Authored by : yj2221\n# Co-authored by : tony9402\n# Link : http://boj.kr/563199054385492b8f7e25eca46a2696\n\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\n\nlearning = {i:[] for i in range(1, n+1)}\nindegree = [0] * (n+1)\ndp = [1] * (n+1)\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    learning[a].append(b)\n    indegree[b] += 1\n    \nq = deque()\nfor i in range(1,n+1):\n    if indegree[i] == 0:\n        q.append(i)\n\nwhile q:\n    cur = q.popleft()\n    for nxt in learning[cur]:\n        indegree[nxt] -= 1\n        if indegree[nxt] == 0:\n            q.append(nxt)\n            dp[nxt] = max(dp[nxt], dp[cur]+1)\n\nprint(' '.join(map(str,dp[1:])))"}
{"topic": "dynamic_programming_2", "problem": "1520", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/5c0cf17f207745eb899923dfc5881c26\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x,y):\n    if x == N-1 and y == M-1:\n        return 1\n    if dp[x][y] == -1:\n        dp[x][y] = 0\n        for i in range(4):\n            dx = nx[i] + x\n            dy = ny[i] + y\n            if dx < 0 or dx >= N or dy < 0 or dy >= M:\n                continue\n            if arr[dx][dy] < arr[x][y]:\n                dp[x][y] += DFS(dx,dy)\n    return dp[x][y]\n\nN, M = map(int, input().split())\narr = []\nnx = [-1, 0, 1, 0]\nny = [0, -1, 0, 1]\ndp = [[-1 for i in range(M)] for j in range(N)]\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nprint(DFS(0,0))"}
{"topic": "dynamic_programming_2", "problem": "17485", "code": "# Authored by : yj2221\n# Co-authored by : tony9402\n# Link : http://boj.kr/1b3b764580774cf799a9a9606d12fec0\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nINF = 99999999\nn, m = map(int,input().split())\nboard = [list(map(int,input().split())) for i in range(n)]\ndp = [[[INF] * m for _ in range(n)] for _ in range(3)]\n\nfor i in range(m):\n    dp[0][0][i] = board[0][i]\n    dp[1][0][i] = board[0][i]\n    dp[2][0][i] = board[0][i]\n\nfor i in range(1, n):\n    for j in range(m):\n        dp[0][i][j] = min(dp[1][i-1][j], dp[2][i-1][j]) + board[i][j]\n        if j!=m-1:\n            dp[1][i][j] = min(dp[0][i-1][j+1], dp[2][i-1][j+1]) + board[i][j]\n        if j!=0:\n            dp[2][i][j] = min(dp[1][i-1][j-1], dp[0][i-1][j-1]) + board[i][j]\n\nprint(min(min(dp[0][n-1]),min(dp[1][n-1]), min(dp[2][n-1])))"}
{"topic": "dynamic_programming_2", "problem": "18427", "code": "# Authored by : yj2221\n# Co-authored by : tony9402\n# Link : http://boj.kr/069cb935ee08462280976f02691b40ca\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M, H = map(int, input().split())\n\nstudents = []\nfor _ in range(N):\n    students.append(list(map(int, input().split())))\n    \ndp = [1] + [0] * (H+1)\n\nfor i in range(N):\n    for j in range(H, -1, -1):\n        for k in students[i]:\n            if j - k >= 0:\n                dp[j] = (dp[j] + dp[j - k]) % 10007\n\nprint(dp[H])"}
{"topic": "dynamic_programming_2", "problem": "21923", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/33f73b2bfd3a443fa03f4e9f240b41a1\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\nboard = [list(map(int, input().split())) for _ in range(n)]\n\nINF = 1e10\ndp = [[[-INF] * m for _ in range(n)] for _ in range(2)]\n\n# up\ndp[0][n-1][0] = board[n-1][0]\nfor y in range(n-1, -1 ,-1):\n    for x in range(m):\n        if y+1<n:\n            dp[0][y][x] = max(dp[0][y][x], dp[0][y+1][x] + board[y][x])\n        if x-1>=0:\n            dp[0][y][x] = max(dp[0][y][x], dp[0][y][x-1] + board[y][x])\n\n# down\ndp[1][n-1][m-1] = board[n-1][m-1]\nfor y in range(n-1, -1 ,-1):\n    for x in range(m-1, -1, -1):\n        if y+1<n:\n            dp[1][y][x] = max(dp[1][y][x], dp[1][y+1][x] + board[y][x])\n        if x+1<m:\n            dp[1][y][x] = max(dp[1][y][x], dp[1][y][x+1] + board[y][x])\n\nanswer = -INF\nfor i in range(n):\n    for j in range(m):\n        answer = max(answer, dp[0][i][j] + dp[1][i][j])\n\nprint(answer)"}
{"topic": "dynamic_programming_2", "problem": "5557", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/23af4ad30fe24df4a71cdd3db925087c\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nnumbers = list(map(int, input().split()))\ndp = [[0] * 21 for _ in range(N - 1)]\ndp[0][numbers[0]] = 1\nfor i in range(1, N - 1):\n    for j in range(21):\n        if dp[i - 1][j] <= 0:\n            continue\n        for oper in (1, -1):\n            temp = j + oper * numbers[i]\n            if 0 <= temp < 21:\n                dp[i][temp] += dp[i - 1][j]\nanswer = dp[N - 2][numbers[N - 1]]\nprint(answer)"}
{"topic": "dynamic_programming_2", "problem": "9251", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/fa5cc7635c6b497495804944b5696e12\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nstring1 = '_' + input()\nstring2 = '_' + input()\nlen1 = len(string1)\nlen2 = len(string2)\ndp = [[0] * len2 for _ in range(len1)]\n\nfor i in range(1, len1):\n    for j in range(1, len2):\n        if string1[i] == string2[j]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n\nprint(dp[len1 - 1][len2 - 1])"}
{"topic": "dynamic_programming_on_trees", "problem": "1135", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/549472cf36d2472cb68fd6a6856bea25\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nt = list(map(int, input().split()))\ntree = [[] for _ in range(n)]\n\nfor idx in range(1, n):\n    tree[t[idx]].append(idx) # \ud2b8\ub9ac \uc0dd\uc131\n\n# time[v] = v\ub97c root\ub85c \ud558\ub294 subtree\uc5d0 \uc815\ubcf4\ub97c \ubaa8\ub450 \uc804\ub2ec\ud558\ub294\ub370 \uac78\ub9ac\ub294 \uc2dc\uac04\ntime = [False]*n\n\ndef dp(v):\n    child_t = []\n    for nei in tree[v]:\n        # Leaf\uae4c\uc9c0 \ub0b4\ub824\uac10\n        dp(nei)\n        # \uac01 child\ub97c root\ub85c \ud558\ub294 subtree\uc5d0 \uc815\ubcf4 \uc804\ub2ec\ud558\ub294\ub370 \uac78\ub9ac\ub294 \uc2dc\uac04 \ubaa8\uc74c\n        child_t.append(time[nei])\n    if not tree[v]:\n        # Child\uac00 \uc5c6\uc73c\uba74 0\n        child_t.append(0)\n\n    child_t.sort(reverse=True)\n    # \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9ac\ub294 \ucabd\ubd80\ud130 \uba3c\uc800 \uc804\ud654\ub97c \ub3cc\ub9ac\uae30\n    need_time = [child_t[i] + i + 1 for i in range(len(child_t))]\n    time[v] = max(need_time) # \uadf8 \uc911\uc5d0 \uac00\uc7a5 \uc624\ub798 \uac78\ub9ac\ub294 \uc2dc\uac04\uc744 assign\n    \ndp(0)\nprint(time[0]-1) # Root node\uc5d0 \uc815\ubcf4 \uc804\ub2ec\ud558\ub294 \uc2dc\uac04\uc740 \uc5c6\uc73c\ub2c8 1\ube7c\uae30"}
{"topic": "dynamic_programming_on_trees", "problem": "17831", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/3e256d935b4e4fe3a887d16fbcb8abef\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nsys.setrecursionlimit(1000000000)\n\nn = int(input())\ntree = [[] for _ in range(n+1)]\n\nmark = list(map(int, input().split()))\nfor idx in range(len(mark)):\n    tree[mark[idx]].append(idx+2)\n\nstat = list(map(int, input().split()))\n\n# dp_mat[v] = [v \ud3ec\ud568, v \ubbf8\ud3ec\ud568]\ndp_mat = [[0,0] for _ in range(n+1)]\n# print(stat)\ndef dp(v):\n    con = 0\n    for nei in tree[v]:\n        dp(nei)\n\n        # Node v\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 -> max(dp_mat[nei]) \uc120\ud0dd\n        # nei\uac00 \uba58\ud1a0\ub4e0 \uc544\ub2c8\ub4e0 \uc0c1\uad00 \uc5c6\uc774 \uac00\uc7a5 \ud070 \uacbd\uc6b0\ub9cc \uac00\uc838\uc624\uba74 \ub428\n        dp_mat[v][1] += max(dp_mat[nei][0], dp_mat[nei][1])\n\n        # Node v\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 -> \ucde8\uc0ac\uc120\ud0dd\uc774 \ud544\uc694\ud568!\n        # \uc774 \uacbd\uc6b0 nei \uc911 \ud558\ub098 x\ub97c \uc120\ud0dd\ud574\uc11c v\uc758 \uba58\ud2f0\ub85c \uc0bc\uac8c \ub428\n        #   x\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 nei\ub294 max(dp_mat[nei]) \ucde8\uc0ac\uc120\ud0dd\n        # x\ub97c \uba58\ud2f0\ub85c \uc0bc\ub294 \uacbd\uc6b0, x\uac00 \uba58\ud1a0\uc778 \uacbd\uc6b0\uc640 \uc544\ub2cc \uacbd\uc6b0\ub97c \uace0\ub824\ud574\uc57c \ud568\n        #   dp_mat[v][1] \uc5f0\uc0b0 \uc2dc dp_mat[x][1](x \ubbf8\ud3ec\ud568)\uc744 \uc0ac\uc6a9\ud558\uba74 \ubb38\uc81c \uc5c6\uc74c\n        #   \ub9cc\uc57d dp_mat[nei][0]\uc744 \uc0ac\uc6a9\ud588\ub2e4\uba74 x\uc758 \uba58\ud1a0 \uad00\uacc4\ub97c \ud574\uc81c\ud558\uace0 v\uc758 \uba58\ud2f0\ub85c \uc0bc\uc544\uc57c \ud568\n        #     \uc774 \uacbd\uc6b0 \ubb34\uc870\uac74 dp_mat[x][0] \ub300\uc2e0 dp_mat[x][1]\uc744 \uc0ac\uc6a9\ud574\uc57c \ud568\n        #     dp_mat[v][1]\uc5d0 \uc601\ud5a5\uc774 \uac00\uac8c \ub428 -> \uc774 \uc601\ud5a5\uc744 con\uc73c\ub85c \uacc4\uc0b0, con\uc744 \uac00\uc7a5 \ud06c\uac8c \ub9cc\ub4dc\ub294 x \uc120\ud0dd\n        con = max(con, stat[v-1]*stat[nei-1] - max(dp_mat[nei][0]-dp_mat[nei][1], 0))\n    dp_mat[v][0] = dp_mat[v][1]+con\n\ndp(1)\nprint(max(dp_mat[1]))"}
{"topic": "graph_traversal", "problem": "1012", "code": "#Authored by : gkgg123\n#Co-authored by : -\n#Link : https://www.acmicpc.net/source/share/061583cd645e449d9936ecd6491016f4\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef bfs(x, y):\n    queue = deque()\n    queue.append((x, y))\n    visited[x][y] = True\n    while queue:\n        x,y = queue.popleft()\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if not (0<=nx<N and 0<=ny<M):continue\n            if visited[nx][ny] or not field[x][y]:continue\n            queue.append((nx,ny))\n            visited[nx][ny] = True\n\nT = int(input())\ndx = [-1,1,0,0]\ndy = [0,0,-1,1]\n\nfor _ in range(T):\n    M, N, K = map(int, input().split())\n    field = [[0 for _ in range(M)] for _ in range(N)]\n    visited = [[False for _ in range(M)] for _ in range(N)]\n    for _ in range(K):\n        y, x = map(int,input().split())\n        field[x][y] = 1\n    result = 0\n    for x in range(N):\n        for y in range(M):\n            if field[x][y] and not visited[x][y]:\n                bfs(x,y)\n                result += 1\n\n    print(result)"}
{"topic": "graph_traversal", "problem": "1058", "code": "# Authored by : gkgg123\n# Co-authored by : -\n# Link : https://www.acmicpc.net/source/share/a369084903d348d2966ab752ccb745ec\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef dfs(idx):\n    global N\n    visited = [ True for _ in range(N) ]\n    visited[idx] = False\n    stack = [ (idx, 0) ]\n    total = 0\n    while stack:\n        curent_x, p_cnt = stack.pop()\n        for either_x in range(N):\n            if arr[curent_x][either_x] == 'Y':\n                if visited[either_x] and p_cnt <= 1:\n                    visited[either_x] = False\n                    stack.append((either_x, p_cnt+1))\n                    total += 1\n    return total\n\nN = int(input())\narr = [list(input()) for _ in range(N)]\nmax_number = 0\n\nfor i in range(N):\n    cu_cnt = dfs(i)\n    max_number = max(max_number,cu_cnt)\n\nprint(max_number)"}
{"topic": "graph_traversal", "problem": "11724", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/e86763e30a974134ade5e3bdf6b7936d\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(now):\n    visited[now] = 1\n    for i in arr[now]:\n        if visited[i] == 0:\n            DFS(i)\n\nN, M = map(int, input().split())\narr = [[] for i in range(N+1)]\nvisited = [0] * (N+1)\nans = 0\n\nfor i in range(M):\n    u,v = map(int, input().split())\n    arr[u].append(v)\n    arr[v].append(u)\n\nfor i in range(1,N+1):\n    if visited[i] == 0:\n        DFS(i)\n        ans += 1\n\nprint(ans)"}
{"topic": "graph_traversal", "problem": "14502", "code": "# Authored by : unodostre\n# Co-authored by : -\n# Link : http://boj.kr/8fcc7b5fbb884f788d0a0ad88803d046\n\nimport sys\nfrom collections import deque\nfrom itertools import combinations\n\ninput = sys.stdin.readline\ndirection = [(0, 1), (-1, 0), (0, -1), (1, 0)]\n\n\ndef get_pos():\n    empty, virus = [], []\n    for i in range(n):\n        for j in range(m):\n            # \ube44\uc5c8\ub2e4\uba74 empty\uc5d0 \ucd94\uac00\n            if arr[i][j] == 0:\n                empty.append((i, j))\n            # \ubc14\uc774\ub7ec\uc2a4\ub77c\uba74 virus\uc5d0 \ucd94\uac00\n            elif arr[i][j] == 2:\n                virus.append((i, j))\n    return empty, virus\n\n\ndef set_wall(comb):\n    for y, x in comb:\n        arr[y][x] = 1\n\n\ndef collapse_wall(comb):\n    for y, x in comb:\n        arr[y][x] = 0\n\n\ndef bfs(virus):\n    queue = deque(virus)\n    visited = [[False] * m for _ in range(n)]  # \ubc29\ubb38 \uc5ec\ubd80\n    count = len(virus)  # \ubc14\uc774\ub7ec\uc2a4 \uac1c\uc218\n    while queue:\n        q_size = len(queue)\n        for _ in range(q_size):\n            y, x = queue.popleft()\n            visited[y][x] = True  # \ubc29\ubb38 \ucc98\ub9ac\n            for dy, dx in direction:\n                ny, nx = y + dy, x + dx\n                # \uc9c0\ub3c4 \ub0b4\uc5d0 \uc788\uace0\n                if (0 <= ny < n) and (0 <= nx < m):\n                    # \ube48 \uacf5\uac04\uc774\uace0 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74\n                    if arr[ny][nx] == 0 and not visited[ny][nx]:\n                        visited[ny][nx] = True  # \ubc29\ubb38 \ucc98\ub9ac\n                        queue.append((ny, nx))  # \ud050\uc5d0 \uc0bd\uc785\n                        count += 1  # \ubc14\uc774\ub7ec\uc2a4 \uac1c\uc218 +1\n    return count\n\n\n# \uc785\ub825\nn, m = map(int, input().split())\narr = [list(map(int, input().split())) for _ in range(n)]\n\nempty, virus = get_pos()  # \ube48 \uc704\uce58, \ubc14\uc774\ub7ec\uc2a4 \uc704\uce58\ncombs = combinations(empty, 3)  # \ubcbd\uc744 \uc138\uc6b8 \uc218 \uc788\ub294 \uc870\ud569\n\ncount = int(1e9)  # \ubc14\uc774\ub7ec\uc2a4 \uac1c\uc218\n# \ubaa8\ub4e0 \uc870\ud569\uc5d0 \ub300\ud574\uc11c\nfor comb in combs:\n    # \ubcbd \uc138\uc6b0\uae30\n    set_wall(comb)\n\n    # \ubc14\uc774\ub7ec\uc2a4 \uc804\uc5fc\n    temp = bfs(virus)\n    if temp < count:\n        count = temp\n\n    # \ubcbd \ud5c8\ubb3c\uae30\n    collapse_wall(comb)\n\n# \ubcbd\uc758 \uac1c\uc218 \uacc4\uc0b0\nwall = n * m - (len(empty) + len(virus))\n\n# \ucd9c\ub825\nprint(n * m - (count + wall + 3))"}
{"topic": "graph_traversal", "problem": "14716", "code": "# Authored by : chj3748\n# Co-authored by : tony9402\n# Link : http://boj.kr/b5d154fcfb1c46e6a99e702c35f4eb26\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nM, N = map(int, input().split())\nbanner = [list(map(int, input().split())) for _ in range(M)]\ndirx = (1, 0, -1, 0, 1, 1, -1, -1)\ndiry = (0, 1, 0, -1, 1, -1, 1, -1)\n\ndef find_string(row, col):\n    stack = [(row, col)]\n    banner[row][col] = 0\n    while stack:\n        x, y = stack.pop()\n        for dx, dy in zip(dirx, diry):\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < M and 0 <= ny < N and banner[nx][ny]:\n                stack.append((nx, ny))\n                banner[nx][ny] = 0\n    return 1\n\nstring_cnt = 0\nfor i in range(M):\n    for j in range(N):\n        if banner[i][j]:\n            string_cnt += find_string(i, j)\n\nprint(string_cnt)"}
{"topic": "graph_traversal", "problem": "16174", "code": "# // Authored by : chj3748\n# // Co-authored by : tony9402\n# // Link : http://boj.kr/4d17bddef7af409ebdb384693b3f96d9\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndirx = (0, 1)\ndiry = (1, 0)\nN = int(input())\nmaps = [list(map(int, input().split())) for _ in range(N)]\ninf = float('inf')\n\nq = deque()\nq.append((0, 0))\nwhile q:\n    x, y = q.popleft()\n    if x == N - 1 and y == N - 1:\n        print('HaruHaru')\n        exit(0)\n\n    for dx, dy in zip(dirx, diry):\n        nx, ny = x + dx * maps[x][y], y + dy * maps[x][y]\n        if 0 <= nx < N and 0 <= ny < N:\n            q.append((nx, ny))\n    maps[x][y] = inf\n\nprint('Hing')"}
{"topic": "graph_traversal", "problem": "16953", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/e6b9e893d80948c5b739caaf3030e55f\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x,ct):\n\n    if x == B:\n        ans.append(ct)\n        return\n\n    if x * 10 + 1 <= B:\n        DFS(x * 10 + 1,ct+1)\n\n    if x * 2 <= B:\n        DFS(x*2,ct+1)\n\nA, B = map(int, input().split())\nans = []\nDFS(A,1)\n\nif ans:\n    print(ans[0])\n\nelse:\n    print(-1)"}
{"topic": "graph_traversal", "problem": "16954", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/d903976eaa454c208a0a75092a20d1c6\n\nfrom collections import deque\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nboard = [list(input()) for _ in range(8)]\n\ndef bfs(board):\n    end = (0,7)\n    que = deque()\n    que.append((7,0,0))\n    visit = [[[False] * 8 for _ in range(8)] for _ in range(9)]\n    visit[0][7][0] = True\n    dy = [0,0,0,-1,1,-1,1,-1,1]\n    dx = [0,-1,1,0,0,-1,1,1,-1]\n    result = 0\n    while que:\n        y,x,time = que.popleft()\n        if y==end[0] and x==end[1]:\n            result = 1\n            break\n        for i in range(9):\n            ny, nx = y + dy[i], x + dx[i]\n            ntime = min(time + 1, 8)\n            if ny<0 or ny>=8 or nx<0 or nx>=8: continue\n            if ny-time>=0 and board[ny-time][nx]=='#': continue\n            if ny-ntime>=0 and board[ny-ntime][nx]=='#': continue\n            if visit[ntime][ny][nx]: continue\n            visit[ntime][ny][nx] = True\n            que.append((ny,nx,ntime))\n    return result\n\nprint(bfs(board))"}
{"topic": "graph_traversal", "problem": "1707", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/314d8f401cf149b3a24d0daf8e0a3637\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\nsys.setrecursionlimit(1000000)\n\ndef dfs(cur):\n    flag = True\n    visited[cur] = True\n    for nei in graph[cur]:\n        if visited[nei]:\n            if label[cur] == label[nei]: #\ub9cc\uc57d neighbor node\uc640 label\uc774 \uac19\ub2e4\uba74?\n                return False # Bipartite graph\uac00 \uc544\ub2c8\ub2e4!\n        else:\n            label[nei] = 3 - label[cur] # \ud604\uc7ac node\uc640 \ub2e4\ub978 label \uc800\uc7a5\n            flag &= dfs(nei)\n    return flag\n    \n\nk = int(input())\nfor _ in range(k):\n    v, e = map(int, input().split())\n    graph = [[] for i in range(v+1)]\n    for i in range(e): # Graph \uc0dd\uc131, Node \ubc88\ud638\ub294 1\ubc88\ubd80\ud130 \uc800\uc7a5\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    visited = [True] + [False]*v\n    label = [0]*(v+1) # \ubaa8\ub4e0 node\uc758 label\uc744 1 \ub610\ub294 2\ub85c \uc800\uc7a5\ud560 \uac83\uc784\n    bipartite = True\n    for i in range(1, v+1): # \uc8fc\uc5b4\uc9c0\ub294 \ubaa8\ub4e0 node\uac00 \ud558\ub098\uc758 connected graph\uc5d0 \uc5c6\uc744 \uc218 \uc788\uc74c\n        if not visited[i]:\n            label[i] = i\n            bipartite &= dfs(i) # \uac01 graph\ub9c8\ub2e4 \ucd5c\uc18c \ud55c \ubc88\uc529 dfs\ub97c \ub3cc\ub824\uc57c \ud568\n        if not bipartite: break # \uadf8 \uc911 \ud558\ub098\ub77c\ub3c4 bipartite\uac00 \uc544\ub2c8\uba74 \uc911\uc9c0\n    if bipartite:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}
{"topic": "graph_traversal", "problem": "1726", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/c707bb0afebf42d3adaad7fee180a45a\n\nimport sys\nfrom collections import deque\ndef input():\n    return sys.stdin.readline().rstrip()\n\nm, n = map(int,input().split())\nboard = [list(map(int,input().split())) for _ in range(m)]\nstart = list(map(int,input().split()))\nstart[0]-=1\nstart[1]-=1\nend = list(map(int,input().split()))\nend[0]-=1\nend[1]-=1\n\ndef move(dir):\n    if dir==1:\n        return 0, 1\n    if dir==2:\n        return 0, -1\n    if dir==3:\n        return 1, 0\n    if dir==4:\n        return -1, 0\n\ndef bfs():\n    y, x, dir = start\n    visit = [[[False] * n for _ in range(m)] for _ in range(5)]\n    visit[dir][y][x] = True\n    q = deque()\n    q.append((y, x, dir, 0))\n    result = 0\n    while q:\n        y, x, dir, cnt = q.popleft()\n        if y==end[0] and x==end[1] and dir==end[2]:\n            result = cnt\n            break\n        for i in range(1, 4):\n            dy,dx = move(dir)\n            ny = y + dy * i\n            nx = x + dx * i\n            if ny<0 or ny>=m or nx<0 or nx>=n: break\n            if board[ny][nx]==1: break\n            if visit[dir][ny][nx]: continue\n            visit[dir][ny][nx] = True\n            q.append((ny, nx, dir, cnt+1))\n\n        for next_dir in range(1, 5):\n            if dir==next_dir: continue\n            if visit[next_dir][y][x]: continue\n            visit[next_dir][y][x] = True\n            if (dir==1 and next_dir==2) : q.append((y, x, next_dir, cnt+2))\n            elif (dir==2 and next_dir==1) : q.append((y, x, next_dir, cnt+2))\n            elif (dir==3 and next_dir==4) : q.append((y, x, next_dir, cnt+2))\n            elif (dir==4 and next_dir==3) : q.append((y, x, next_dir, cnt+2))\n            else: q.append((y, x, next_dir, cnt+1))\n    return result\n\nprint(bfs())"}
{"topic": "graph_traversal", "problem": "20924", "code": "# Authored by : kis03160\n# Co-authored by : tony9402\n# Link : http://boj.kr/2cb5e18deb964794bec3e960225ad83e\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef answer(G, r):\n    is_giga_find = False\n    longest = 0\n    body = 0\n    visited = [False for _ in range(len(G))]\n    q = deque()\n    q.append((0, r))\n    visited[r] = True\n\n    while q:\n        dist, node = q.popleft()\n\n        if dist > longest:\n            longest = dist\n\n        # \uae30\uac00 \uac00\uc9c0\uac00 \uc544\uc9c1 \uc548\ub098\uc654\uace0, 2\uac1c \uc774\uc0c1 \uc5f0\uacb0\ub418\uc5b4\uc788\uc744 \ub54c\n        # or V\uc790\n        if not is_giga_find and len(G[node]) > 2 \\\n            or (node == r and len(G[node]) >= 2):\n            is_giga_find = True\n            body = dist\n\n        for branch in G[node]:\n            if not visited[branch]:\n                visited[branch] = True\n                q.append((dist + G[node][branch], branch))\n\n    # \uae30\uac00\ub97c \ubabb\ucc3e\uc558\ub2e4 -> \uac00\uc9c0\uac00 \uc5c6\ub2e4.\n    if not is_giga_find:\n        body = longest\n        longest = body\n\n    # \uae30\ub465, \uac00\uc7a5 \uae34 \uac00\uc9c0 \uae38\uc774(\ub8e8\ud2b8~\ud574\ub2f9\uac00\uc9c0 \uae38\uc774 - \uae30\ub465 \uae38\uc774)\n    return body, longest - body\n\nn, r = map(int, input().split())\nG = {i: dict() for i in range(n + 1)}\nfor i in range(n - 1):\n    a, b, c = map(int, input().split())\n    G[a][b] = c\n    G[b][a] = c\nprint(*answer(G, r))"}
{"topic": "graph_traversal", "problem": "2206", "code": "# Authored by : kis03160\n# Co-authored by : tony9402\n# Link : http://boj.kr/2cb5e18deb964794bec3e960225ad83e\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef answer(row, col):\n    global m, n\n\n    shortest = 10000001\n    q = deque()\n    direction = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    visited = [[[0] * 2 for _ in range(m)] for _ in range(n)]\n\n    q.append((row, col, 1))\n    visited[row][col][1] = 1\n    while q:\n        r, c, is_able = q.popleft()\n        for r_, c_ in direction:\n            drow = r + r_\n            dcol = c + c_\n\n            if drow < 0 or dcol < 0 or drow >= n or dcol >= m:\n                continue\n\n            if visited[drow][dcol][is_able] == 0 and G[drow][dcol] == '0':\n                visited[drow][dcol][is_able] = visited[r][c][is_able] + 1\n                q.append((drow, dcol, is_able))\n\n            elif is_able == 1 and G[drow][dcol] == '1':\n                visited[drow][dcol][0] = visited[r][c][1] + 1\n                q.append((drow, dcol, 0))\n\n\n    shortest = visited[n - 1][m - 1]\n    return_val = None\n    if shortest[0] == 0 and shortest[1] == 0:\n        return_val = -1\n    else:\n        if shortest[0] > shortest[1]:\n            return_val = shortest[1]\n            if return_val == 0:\n                return_val = shortest[0]\n        else:\n            return_val = shortest[0]\n            if return_val == 0:\n                return_val = shortest[1]\n\n    return return_val\n\nn, m = map(int, input().split())\n\nG = []\nwalls = []\nfor i in range(n):\n    x = []\n    temp = input()\n    for j in range(m):\n        if temp[j] == '1':\n            walls.append((i, j))\n            x.append('1')\n        else:\n            x.append('0')\n    G.append(x)\n\nprint(answer(0, 0))"}
{"topic": "graph_traversal", "problem": "2589", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/056db524c16f458c9bc7a5beb2c35da8\n\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef BFS(x,y):\n    queue = deque()\n    queue.append((x,y,0))\n    visited[x][y] = 1\n    while queue:\n        q = queue.popleft()\n        for i in range(4):\n            dx = nx[i] + q[0]\n            dy = ny[i] + q[1]\n            if dx < 0 or dx >= L or dy < 0 or dy >= W:\n                continue\n            if visited[dx][dy] == 0 and arr[dx][dy] == 'L':\n                visited[dx][dy] = 1\n                queue.append((dx,dy,q[2]+1))\n    return q[2]\n\nL, W = map(int, input().split())\narr = []\nnx = [-1, 0, 1, 0]\nny = [0, -1, 0, 1]\nMIN_CT = 0\n\nfor i in range(L):\n    arr.append(input())\n\nfor i in range(L):\n    for j in range(W):\n        if arr[i][j] == 'L':\n            visited = [[0 for i in range(W)] for j in range(L)]\n            ct = BFS(i,j)\n            MIN_CT = max(MIN_CT, ct)\nprint(MIN_CT)"}
{"topic": "graph_traversal", "problem": "4179", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/bf6009039d6b410291eb253279ce0c8f\n\nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nr, c = map(int, input().split())\nboard = [[-1] * (c+2) for _ in range(r+2)]\nvisit = [[False] * (c+2) for _ in range(r+2)]\nq = deque()\nfire_q = deque()\ndy = [0, 0, -1, 1]\ndx = [-1, 1, 0, 0]\n\nfor i in range(1,r+1):\n    line = input()\n    for j in range(1,c+1):\n        if line[j-1]=='#': board[i][j] = 1\n        elif line[j-1]=='.': board[i][j] = 0\n        elif line[j-1]=='J': \n            board[i][j] = 0\n            q.append([i,j])\n        elif line[j-1]=='F': \n            board[i][j] = 2\n            fire_q.append([i,j])\n\ndef check(cur, board):\n    y, x = cur\n    return board[y][x] == -1\n\ndef bfs(q, cnt):\n    global r, c\n    next_q = deque()\n    while q:\n        y, x = q.popleft()\n        if board[y][x] == 2: continue\n        for i in range(4):\n            ny, nx = y + dy[i], x + dx[i]\n            if ny<0 or ny>=r+2 or nx<0 or nx>=c+2: continue\n            if board[ny][nx] == 1 or board[ny][nx] == 2: continue\n            if visit[ny][nx]: continue\n            if check((ny,nx), board):\n                return True, next_q\n            next_q.append([ny, nx])\n            visit[ny][nx] = True\n    return False, next_q\n\ndef fire_bfs(q):\n    global r, c\n    next_q = deque()\n    while q:\n        y, x = q.popleft()\n        for i in range(4):\n            ny, nx = y + dy[i], x + dx[i]\n            if ny<=0 or ny>=r+1 or nx<=0 or nx>=c+1: continue\n            if board[ny][nx] == 1 or board[ny][nx] == 2: continue\n            next_q.append([ny, nx])\n            board[ny][nx] = 2\n    return next_q\n\ndef solution():\n    global q, fire_q\n    cnt = 0\n    while True:\n        cnt += 1\n        chk, q = bfs(q, cnt)\n        if chk:\n            return cnt\n        if not q:\n            return 'IMPOSSIBLE'\n        fire_q = fire_bfs(fire_q)\n    return 'IMPOSSIBLE'\n\nprint(solution())"}
{"topic": "graph_traversal", "problem": "4963", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/27c8f362bf2c4defbe77f079e9eaa89e\nimport sys\nsys.setrecursionlimit(10000)\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef DFS(x, y):\n    arr[x][y] = 0\n    for i in range(8):\n        dx = nx[i] + x\n        dy = ny[i] + y\n        if dx < 0 or dx >= h or dy < 0 or dy >= w:\n            continue\n        if arr[dx][dy] == 1:\n            DFS(dx,dy)\n\nnx = [-1,-1,-1,0,1,1,1,0]\nny = [-1,0,1,1,1,0,-1,-1]\n\nwhile True:\n    w, h = map(int, input().split())\n    if w == 0 and h == 0:\n        break\n    arr = []\n    ct = 0\n    for i in range(h):\n        arr.append(list(map(int, input().split())))\n    for i in range(h):\n        for j in range(w):\n            if arr[i][j] == 1:\n                DFS(i,j)\n                ct += 1\n    print(ct)"}
{"topic": "graph_traversal", "problem": "7569", "code": "# Authored by : gusdn3477\n# Co-authored by : tony9402\n# Link : http://boj.kr/8a53cdacfc6340c894fb47257232f244\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef checkMap():\n    for z in range(H):\n        for i in range(N):\n            for j in range(M):\n                if arr[z][i][j] == 0:\n                    return False\n    return True\n\ndef BFS():\n    while queue:\n        q = queue.popleft()\n        z, x, y = q[0]\n        for i in range(6):\n            dx = x + nx[i]\n            dy = y + ny[i]\n            dz = z + nz[i]\n            if dx < 0 or dx >= N or dy < 0 or dy >= M or dz < 0 or dz >= H:\n                continue\n            if arr[dz][dx][dy] == 0:\n                arr[dz][dx][dy] = 1\n                queue.append(((dz,dx,dy), q[1]+1))\n\n    if checkMap():\n        return q[1]\n    return -1\n\nM, N, H = map(int, input().split())\narr = []\nnx = [-1,0,1,0,0,0]\nny = [0,-1,0,1,0,0]\nnz = [0,0,0,0,-1,1]\n\nqueue = deque()\narr = [ [ list(map(int, input().split())) for _ in range(N) ] for _ in range(H) ]\n\nfor z in range(H):\n    for i in range(N):\n        for j in range(M):\n            if arr[z][i][j] == 1:\n                arr[z][i][j] = 1\n                queue.append(((z,i,j),0))\nans = BFS()\nprint(ans)"}
{"topic": "greedy", "problem": "11000", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/c2436fde865f49fda490c2dcf1c6dba1\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nlecture = []\nfor _ in range(N):\n    heapq.heappush(lecture, list(map(int, input().split())))\n\nend_points = []\nwhile lecture:\n    l = heapq.heappop(lecture)\n    \n    if end_points:\n        if l[0] >= end_points[0]:\n            heapq.heappop(end_points)\n    heapq.heappush(end_points, l[1])\n\nprint(len(end_points))"}
{"topic": "greedy", "problem": "11399", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/f1c91eae2a2245c599c5d1bbc9cde9f5\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = list(map(int, input().split()))\narr.sort()\ntotal = 0\nwaiting = 0\n\nfor i in range(len(arr)):\n    total += arr[i] + waiting\n    waiting += arr[i]\n\nprint(total)"}
{"topic": "greedy", "problem": "11508", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/09487b6e14e044f8a477a743e37bce94\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\ntotal = 0\n\nfor i in range(N):\n    arr.append(int(input()))\n\narr.sort(reverse = True)\n\nct = 1\n\nfor i in range(N):\n    if ct % 3 == 0:\n        ct = 1\n        continue\n\n    total += arr[i]\n    ct += 1\n\nprint(total)"}
{"topic": "greedy", "problem": "13164", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/cfb369b6a5134cfa9c0859eab5464c47\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split())\nlst = list(map(int, input().split())) # \uc815\ub82c\ub41c \uc0c1\ud0dc\ub85c \ub4e4\uc5b4\uc634\nsub = sorted([lst[i+1] - lst[i] for i in range(n-1)]) # \uc6d0\uc0dd \uac04 \ud0a4 \ucc28\uc774 \uc815\ub82c\nprint(sum(sub[:(n-k)])) # Greedy\ud558\uac8c n-k\uac1c\ub9cc \uc120\ud0dd"}
{"topic": "greedy", "problem": "14247", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/285536cac4ee473eaf9d01b6c6540fc6\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\ntotal = []\nans = 0\nday = 0\narr = list(map(int, input().split()))\narr2 = list(map(int, input().split()))\nfor i in range(n):\n    total.append([arr[i],arr2[i]])\ntotal.sort(key = lambda x : (x[1], -x[0]))\nfor i in range(n):\n    ans += total[i][0] + total[i][1] * day\n    day += 1\nprint(ans)"}
{"topic": "greedy", "problem": "14916", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/f274a6ac753440deb8c47de3ee127244\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nif N < 5:\n    if N % 2 != 0:\n        ans = -1\n    else:\n        ans = N // 2\nelse:\n    ct, N = divmod(N, 5)\n    if N == 0:\n        ans = ct\n    else:\n        if N % 2 == 0:\n            ct += N // 2\n            ans = ct\n        else:\n            ct += (N + 5) // 2 - 1\n            ans = ct\nprint(ans)"}
{"topic": "greedy", "problem": "16208", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/e75629ad3348460599c12c53f64b7062\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = list(map(int, input().split()))\narr.sort()\nlen = sum(arr)\ntotal = 0\nfor i in arr:\n    len = len - i\n    total += i * len\nprint(total)"}
{"topic": "greedy", "problem": "16435", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/ee8c8ce8f36344348accd5605c2aba66\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, L = map(int, input().split())\narr = list(map(int, input().split()))\narr.sort()\n\nfor i in arr:\n    if L >= i:\n        L += 1\nprint(L)"}
{"topic": "greedy", "problem": "1758", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/c3b5f907db554df093b6d9ea748fed35\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\nans = 0\nfor i in range(N):\n    arr.append(int(input()))\narr.sort(key = lambda x : -x)\nfor i in range(len(arr)):\n    tip = arr[i] - i\n    if tip > 0:\n        ans += tip\nprint(ans)"}
{"topic": "greedy", "problem": "1817", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/b60f3d6809514134b0740ee31eeb763a\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\nans = 0\nif N == 0:\n    print(ans)\nelse:\n    queue = deque(list(map(int, input().split())))\n    while queue:\n        weight = 0\n        while queue and weight + queue[0] <= M:\n            weight += queue.popleft()\n        ans += 1\n    print(ans)"}
{"topic": "greedy", "problem": "1931", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/7150be3ff485402ebb4c5011fa88ac7d\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\ntotal = 1\n\nfor i in range(N):\n    a,b = map(int, input().split())\n    arr.append((a,b))\n\narr.sort(key = lambda x : (x[1],x[0]))\nend_time = arr[0][1]\n\nfor i in range(1,N):\n    if arr[i][0] >= end_time:\n        end_time = arr[i][1]\n        total += 1\n\nprint(total)"}
{"topic": "greedy", "problem": "19598", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/2b9516c8789c4a42849250efcef845c7\nimport heapq\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst = sorted([list(map(int, input().split())) for _ in range(n)])\nheap = [lst[0][1]]\nfor i in range(1, n):\n    if heap[0] > lst[i][0]: # \uc0c8\ub85c\uc6b4 \ud68c\uc758\uc2e4 \ud544\uc694\n        heapq.heappush(heap, lst[i][1])\n    else: # \uae30\uc874 \ud68c\uc758\uc2e4 \uc774\uc5b4\uc11c \uc0ac\uc6a9 \uac00\ub2a5\n        heapq.heappop(heap)\n        heapq.heappush(heap, lst[i][1])\n\nprint(len(heap))"}
{"topic": "greedy", "problem": "20115", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/cd5989ea170a46c9aba0b049b70f4ee6\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = list(map(int, input().split()))\narr.sort()\nfor i in range(len(arr)-1):\n    arr[-1] += arr[i] / 2\nprint(arr[-1])"}
{"topic": "greedy", "problem": "2141", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/8be8b254ebe24830805a22953bdb3fcc\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst = [list(map(int, input().split())) for _ in range(n)] \nlst.sort() # \ub9c8\uc744 \uc704\uce58 \ub530\ub77c \uba3c\uc800 \uc815\ub82c\n\ndist = 0\nr_man, l_man = 0, 0\nfor i in range(n):\n    tmp = lst[i][0] - lst[0][0]\n    dist += tmp*lst[i][1] # (\ucd5c\ucd08 \ub9c8\uc744 ~ i\ubc88\uc9f8 \ub9c8\uc744 \uac70\ub9ac) * \uc0ac\ub78c \uc218\n    r_man += lst[i][1] #\ud604\uc7ac \uc704\uce58\ubcf4\ub2e4 \uc624\ub978\ub611\uc5d0 \uc788\ub294 \uc0ac\ub78c \uc218\n\nmin_dist = dist\nsol = lst[0][0]\nfor i in range(1, n):\n    tmp = lst[i][0] - lst[i-1][0]\n    l_man += lst[i-1][1] # \uc774\ub3d9 \uc2dc \uc67c\ucabd\uc5d0 \uc788\uac8c \ub420 \uc0ac\ub78c \ucd94\uac00\n    r_man -= lst[i-1][1] # \uc774\ub3d9 \uc2dc \ub354 \uc774\uc0c1 \uc624\ub978\ucabd\uc5d0 \uc788\uc9c0 \uc54a\ub294 \uc0ac\ub78c \uc81c\uac70\n    dist = dist + (l_man - r_man)*tmp # \uac70\ub9ac \uacc4\uc0b0\n    \n    if min_dist > dist: #\uc5c5\ub370\uc774\ud2b8\n        min_dist = dist\n        sol = lst[i][0]\n\nprint(sol)"}
{"topic": "greedy", "problem": "2212", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/2b4e1797973e4e16a3b38ff778023e3e\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nk = int(input())\nlst = sorted(list(set(map(int, input().split())))) # \uc911\ubcf5 \uc81c\uac70 \ud6c4 \uc815\ub82c\ndistance = sorted([lst[i]-lst[i-1] for i in range(1, len(lst))]) # \uc13c\uc11c \uc0ac\uc774 \uac70\ub9ac \uacc4\uc0b0 \ud6c4 \uc815\ub82c\nprint(sum(distance[:(len(lst)-k)])) # \uadf8\ub9ac\ub514\ud558\uac8c \ucd5c\uc7a5 \uac70\ub9ac k\uac1c \uc81c\uc678\ud55c \uac8c \uc815\ub2f5"}
{"topic": "greedy", "problem": "2812", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/632e2f63fb4a44caacbddb53207f2279\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split())\nt = k # \ubbf8\ub798\ub97c \uc704\ud574 \uc800\uc7a5\nnum = list(input())\nstack = [] # \uc815\ub2f5 \uc800\uc7a5 \ubc0f \uc9c0\uc6b8 \ud6c4\ubcf4 \uc800\uc7a5\n\nfor i in range(n):\n    while k>0 and stack: # \uc9c0\uc6b8 \uc218 \uc788\ub294 \uc22b\uc790\uac00 \uc788\uc744 \ub54c\n        if stack[-1] < num[i]: # \uc9c0\uc6b0\ub294 \uac8c \uc774\ub4dd\uc774\uba74\n            stack.pop()\n            k -= 1\n        else:\n            break\n    stack.append(num[i])\n\nprint(*stack[:(n-t)], sep='') #\ub0a8\uc544\uc788\ub294 \uc22b\uc790\ub294 n-(\ucd5c\ucd08 k) => t\ub97c \uc5ec\uae30\uc11c \uc0ac\uc6a9"}
{"topic": "implementation", "problem": "1212", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/7d0d2bcb568d4c3d86770e520838ef65\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef change(num, first = False):\n    ret = ''\n    while num:\n        ret += chr(num % 2 + 48)\n        num //= 2\n    while len(ret) < 3:\n        ret += '0'\n\n    idx = 3\n    if first:\n        while idx > 1 and ret[idx - 1] == '0':\n            idx -= 1\n    return ret[:idx][::-1]\n\nN = input()\nisFirst = True\nfor i in range(len(N)):\n    print(change(int(N[i]), isFirst),end='')\n    isFirst = False"}
{"topic": "implementation", "problem": "14719", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/5af0f7388d84485db221c368ce306c4b\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nh, w = map(int, input().split())\nwall = list(map(int, input().split()))\n\n# Numpy \uc5c6\uc774 argmax\ndef argmax(a):\n    return max(range(len(a)), key=lambda x: a[x])\nmax_idx = argmax(wall)\n\nsol, tmp_max = 0, 0\n# \uac00\uc7a5 \ub192\uc740 \ubcbd \uae30\uc900 \uc67c\ucabd\ubd80\ud130 \ubcbd+\ucc44\uc6b8 \uc218 \uc788\ub294 \ubb3c \ud569\ud55c \uba74\uc801 \ub354\ud558\uae30\nfor i in range(max_idx+1):\n    tmp_max = max(tmp_max, wall[i])\n    sol += tmp_max\n\ntmp_max = 0\n# \uac00\uc7a5 \ub192\uc740 \ubcbd \uae30\uc900 \uc624\ub978\ucabd\ubd80\ud130 \ubcbd+\ucc44\uc6b8 \uc218 \uc788\ub294 \ubb3c \ud569\ud55c \uba74\uc801 \ub354\ud558\uae30\nfor i in range(w-1, max_idx, -1):\n    tmp_max = max(tmp_max, wall[i])\n    sol += tmp_max\n\n#\ubcbd\uc774 \ucc28\uc9c0\ud558\ub294 \uba74\uc801 \ube7c\uc8fc\uba74 \uc815\ub2f5\nprint(sol-sum(wall))"}
{"topic": "implementation", "problem": "15787", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/a636cadadf8d444180ee022a5af9353a\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int,input().split())\ntrains= [0] * (n+1)\ncommands = [list(map(int, input().split())) for _ in range(m)]\n\nfor command in commands:\n    if command[0] == 1:\n        _, i, x = command\n        trains[i] |= (1 << (x-1)) \n    elif command[0] == 2:\n        _, i, x = command\n        trains[i] &= ~(1 << (x-1))\n    elif command[0] == 3:\n        _, i = command\n        trains[i] = trains[i] << 1\n        trains[i] &= ((1 << 20) - 1)\n    elif command[0] == 4:\n        _, i = command\n        trains[i] = trains[i] >> 1\n\nresult = set(trains[1:])\nprint(len(result))"}
{"topic": "implementation", "problem": "15806", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/211883f3485445669772b7b6bce7dbeb\n        \nfrom collections import deque\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M, K, t = map(int, input().split())\nboard = [[0]*N for _ in range(N)]\n\nmolds, cleans = [], []\nfor _ in range(M):\n    x, y = map(int, input().split())\n    y -= 1\n    x -= 1\n    board[y][x] = 1\n    molds.append([y, x])\n\nfor _ in range(K):\n    x, y = map(int, input().split())\n    y -= 1\n    x -= 1\n    cleans.append([y, x])\n\nvisit = [[[False]*N for _ in range(N)] for _ in range(2)]\n\ndef bfs(molds, t):\n    next_molds = deque()\n    \n    dy = [-2,-2,-1,-1,1,1,2,2]\n    dx = [-1,1,-2,2,-2,2,-1,1]\n    while molds:\n        y, x = molds.popleft()\n        \n        for i in range(8):\n            ny, nx = y + dy[i], x + dx[i]\n            if ny>=N or ny<0 or nx>=N or nx<0: continue\n            if visit[(t+1)%2][ny][nx]: continue\n            visit[(t+1)%2][ny][nx] = True\n            next_molds.append([ny,nx])\n    return next_molds\n\n\ndef solution(cleans, molds):\n    global board, visit\n    molds = deque(molds)\n    for _t in range(t):\n        molds = bfs(molds, _t)\n    for clean in cleans:\n        y, x = clean\n        if visit[(_t+1)%2][y][x]==1:\n            return True\n    return False\n\nresult = solution(cleans, molds)\nprint('YES' if result else 'NO')"}
{"topic": "implementation", "problem": "16935", "code": "# Authored by : chj3748\n# Co-authored by : -\n# http://boj.kr/8f470025f1ae478d8e24a0ff85d0d873\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n# \uc0c1\ud558\ubc18\uc804\ndef fun1(arr):\n    r_num = len(arr)\n    c_num = len(arr[0])\n    temp = [arr[-(row + 1)] for row in range(r_num)]\n    return temp\n\n# \uc88c\uc6b0\ubc18\uc804\ndef fun2(arr):\n    arr_N = len(arr)\n    arr_M = len(arr[0])\n    temp = [arr[row][::-1] for row in range(arr_N)]\n    return temp\n\n# \uc624\ub978\ucabd90, \uc2dc\uacc4\ubc29\ud5a5 90\ndef fun3(arr):\n    arr_N = len(arr)\n    arr_M = len(arr[0])\n    temp = [[arr[-(col + 1)][row] for col in range(arr_N)] for row in range(arr_M)]\n    return temp\n\n# \uc67c\ucabd 90, \ubc18\uc2dc\uacc4 90\ndef fun4(arr):\n    arr_N = len(arr)\n    arr_M = len(arr[0])\n    temp = [[arr[col][-(row + 1)] for col in range(arr_N)] for row in range(arr_M)]\n    return temp\n\n# \uc11c\ube0c \uadf8\ub8f9 \uc624\ub978\ucabd90 \ud68c\uc804\ndef fun5(arr):\n    r_num = len(arr)\n    c_num = len(arr[0])\n    h_rn = r_num // 2\n    h_cn = c_num // 2\n    temp = [[0] * c_num for _ in range(r_num)]\n    for row in range(r_num):\n        for col in range(c_num):\n            if row < h_rn and col < h_cn:\n                temp[row][col] = arr[row + h_rn][col]\n            elif row < h_rn and col >= h_cn:\n                temp[row][col] = arr[row][col - h_cn]\n            elif row >= h_rn and col < h_cn:\n                temp[row][col] = arr[row][col + h_cn]\n            elif row >= h_rn and col >= h_cn:\n                temp[row][col] = arr[row - h_rn][col]\n    return temp\n\n# \uc11c\ube0c \uadf8\ub8f9 \uc67c\ucabd90 \ud68c\uc804\ndef fun6(arr):\n    r_num = len(arr)\n    c_num = len(arr[0])\n    h_rn = r_num // 2\n    h_cn = c_num // 2\n    temp = [[0] * c_num for _ in range(r_num)]\n    for row in range(r_num):\n        for col in range(c_num):\n            if row < h_rn and col < h_cn:\n                temp[row][col] = arr[row][col + h_cn]\n            elif row < h_rn and col >= h_cn:\n                temp[row][col] = arr[row + h_rn][col]\n            elif row >= h_rn and col < h_cn:\n                temp[row][col] = arr[row - h_rn][col]\n            elif row >= h_rn and col >= h_cn:\n                temp[row][col] = arr[row][col - h_cn]\n    return temp\n\n\nN, M, R = map(int, input().split())\narray = [input().split() for _ in range(N)]\nfor operator in input().split():\n    array = locals()['fun' + operator](array)\n\nfor row in array:\n    print(' '.join(row))"}
{"topic": "implementation", "problem": "17413", "code": "# Authored by : shjeong92\n# Co-authored by : -\n# Link : http://boj.kr/c6cb199947f24b69ab8c425987c63d1c\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndata = input()\nanswer = ''\ntemp=[]\nlength = len(data)\ninParen = False\n\nfor i in range(length):\n    \n    if data[i] == '<':\n        inParen = True\n    elif data[i] == '>':\n        inParen = False\n    \n    if inParen and data[i] == '<' :\n        if temp:\n            answer += ''.join(temp[::-1])+'<'\n            temp=[]\n        else:\n            answer +='<'\n    elif inParen and data[i] != '<':\n        answer += data[i]\n\n    elif not inParen and data[i] =='>':\n        answer += data[i]\n    \n    elif not inParen and data[i]!= ' ':\n        temp.append(data[i])\n    elif not inParen and data[i]== ' ':\n        answer += ''.join(temp[::-1])+' '\n        temp=[]\n\nif temp:\n    answer+= ''.join(temp[::-1])\nprint(answer)"}
{"topic": "implementation", "problem": "21608", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/178ebc4de06c4c1fb718d3038ec42d50\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\ntotal = 0\nnx = [-1, 0, 1, 0]\nny = [0, -1, 0, 1]\nstu = []\nfeel = [[0 for i in range(N)] for j in range(N)]\narr = [[0 for i in range(N)] for j in range(N)]\nsave = [[] for i in range(N**2+1)]\nfor i in range(N**2):\n    a = list(map(int, input().split()))\n    stu.append(a)\n    save[a[0]].append(a[1:])\nfor i in range(N**2):\n    temp = []\n    for x in range(N):\n        for y in range(N):\n            if arr[x][y] != 0:\n                continue\n            like = 0\n            empty = 0\n            for z in range(4):\n                dx = x + nx[z]\n                dy = y + ny[z]\n                if dx < 0 or dx >= N or dy < 0 or dy >= N:\n                    continue\n                if  arr[dx][dy] in stu[i][1:]:\n                    like += 1\n                if arr[dx][dy] == 0:\n                    empty += 1\n            temp.append((like, empty, (x,y)))\n    temp.sort(key = lambda x : (-x[0], -x[1], x[2]))\n    arr[temp[0][2][0]][temp[0][2][1]] = stu[i][0]\nfor i in range(N):\n    for j in range(N):\n        now = arr[i][j]\n        near = 0\n        for z in range(4):\n            dx = i + nx[z]\n            dy = j + ny[z]\n            if dx < 0 or dx >= N or dy < 0 or dy >= N:\n                continue\n            if arr[dx][dy] in save[now][0]:\n                near += 1\n        feel[i][j] = near\nfor i in range(N):\n    for j in range(N):\n        if feel[i][j] == 1:\n            total += 1\n        elif feel[i][j] == 2:\n            total += 10\n        elif feel[i][j] == 3:\n            total += 100\n        elif feel[i][j] == 4:\n            total += 1000\nprint(total)"}
{"topic": "implementation", "problem": "21918", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/04ffe7467c0542c386a2ff3fc95f0b6b\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr = list(map(int, input().split()))\n\nfor i in range(M):\n    a,b,c = map(int, input().split())\n    \n    if a == 1:\n        arr[b-1] = c\n    \n    elif a == 2:\n        for j in range(b-1,c):\n            if arr[j] == 0:\n                arr[j] = 1\n            else:\n                arr[j] = 0\n\n    elif a == 3:\n        for j in range(b-1,c):\n            arr[j] = 0\n\n    else:\n        for j in range(b-1,c):\n            arr[j] = 1\n\nprint(*arr)"}
{"topic": "implementation", "problem": "2729", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/fd10df28858644eebc6b4ffd042c2d83\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nT = int(input())\nfor i in range(T):\n    a,b = input().split()\n    total = int(a,2) + int(b,2)\n    print(bin(total)[2:])"}
{"topic": "implementation", "problem": "5597", "code": "# Authored by : samuel95\n# Co-authored by : -\n# Link : http://boj.kr/5229a16593bd45beb68eefd6224ef63b\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nnumbers = [False for _ in range(31)]\n\nfor _ in range(28):\n    n = int(input())\n    numbers[n] = True\n\nans = []\n\nfor i in range(1, 31):\n    if not numbers[i]:\n        ans.append(i)\n\nprint(ans[0])\nprint(ans[1])"}
{"topic": "math", "problem": "11653", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/ebf75b738a784d6dad28494e18113b31\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nX = N\nfor i in range(2, N + 1):\n    if X == 1:\n        break\n    while X % i == 0:\n        X //= i\n        print(i)"}
{"topic": "math", "problem": "1978", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/fba2f023d5c346aa826b3c6922fb0a27\nimport sys\nfrom math import sqrt\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nprime = [1] * 1005\nprime[0] = 0\nprime[1] = 0\nct = 0\nN = int(input())\narr = list(map(int, input().split()))\nfor i in range(2, int(sqrt(1005))+1):\n    for j in range(i+i, 1005, i):\n        if prime[j] == 1:\n            prime[j] = 0\nfor i in arr:\n    if prime[i]:\n        ct += 1\nprint(ct)"}
{"topic": "math", "problem": "21312", "code": "# // Authored by : chj3748\n# // Co-authored by : -\n# // Link : http://boj.kr/21536cc8d28a4570aca6c9b48fc41e26\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nodd_num = -1\neven_num = -1\nfor number in map(int, input().split()):\n    if number % 2:\n        if odd_num == -1:\n            odd_num = number\n        else:\n            odd_num *= number\n    else:\n        if even_num == -1:\n            even_num = number\n        else:\n            even_num *= number\nif odd_num != -1:\n    print(odd_num)\nelse:\n    print(even_num)"}
{"topic": "math", "problem": "21919", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/e59d5d5d486b44ba93000175e5118406\nimport sys\nfrom math import sqrt\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef GCD(x,y):\n    if y == 0:\n        return x\n    else:\n        return GCD(y, x%y)\n\narr = [0] * 1000003\nfor i in range(2,int(sqrt(1000003))+1):\n    for j in range(i+i, 1000003, i):\n        if arr[j] == 0:\n            arr[j] = 1\narr[0] = 1\narr[1] = 1\nLCM = 1\nN = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in A:\n    if not arr[i]:\n        ans.append(i)\nif not ans:\n    print(-1)\nelse:\n    LCM = ans[0]\n    for i in range(1,len(ans)):\n        LCM = ans[i] * LCM // GCD(ans[i], LCM)\n    print(LCM)"}
{"topic": "math", "problem": "21920", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/9824ccd807974698b94586b14edbb348\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef GCD(x,y):\n    if y == 0:\n        return x\n    else:\n        return GCD(y, x%y)\n\nN = int(input())\nA = list(map(int, input().split()))\nX = int(input())\nans = []\nfor i in A:\n    if GCD(X,i) == 1:\n        ans.append(i)\nprint(sum(ans)/len(ans))"}
{"topic": "math", "problem": "2753", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/8321cffd959748c981d1cb359cccee9d\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nyear = int(input())\n\nprint(1 if not year % 4 and (year % 100 or not year % 400) else 0)"}
{"topic": "math", "problem": "5618", "code": "# Authored by : gusdn3477\n# Co-authored by : tony9402\n# Link : http://boj.kr/aef57ade1e5c4c6e90f08a159fe96ca2\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef GCD(x,y):\n    if y == 0:\n        return x\n    else:\n        return GCD(y, x%y)\n\nn = int(input())\narr = list(map(int, input().split()))\noutputs = list()\n\ngcd = arr[0]\nfor i in range(1, n):\n    gcd = GCD(gcd, arr[i])\n\nx = 1\nwhile x * x <= gcd:\n    if gcd % x == 0:\n        outputs.append(x)\n        if x * x != gcd:\n            outputs.append(gcd // x)\n    x += 1\n\noutputs.sort()\nprint(*outputs)"}
{"topic": "minimum_spanning_tree", "problem": "1368", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/aa071582c18b4cb1acaa18950654ff3e\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\ndig_costs = [int(input()) for _ in range(N)]\nlink_costs = [list(map(int, input().split())) for _ in range(N)]\nparents = list(range(N + 1))\n\ndef find_parent(x):\n    if parents[x] != x:\n        parents[x] = find_parent(parents[x])\n    return parents[x]\n\ndef union_set(a, b):\n    parent_a = find_parent(a)\n    parent_b = find_parent(b)\n    if parent_a < parent_b:\n        parents[parent_b] = parent_a\n    else:\n        parents[parent_a] = parent_b\n\nedges = []\nfor i in range(N):\n    for j in range(i + 1, N):\n        heapq.heappush(edges, [link_costs[i][j], i+1, j+1])\n    heapq.heappush(edges, [dig_costs[i], 0, i + 1])\n\nlink_cnt = 0\ntotal = 0\nwhile edges:\n    if link_cnt == N:\n        break\n    cost, n1, n2 = heapq.heappop(edges)\n    p_n1 = find_parent(n1)\n    p_n2 = find_parent(n2)\n    if p_n1 != p_n2:\n        union_set(n1, n2)\n        total += cost\n        link_cnt += 1\n\nprint(total)"}
{"topic": "minimum_spanning_tree", "problem": "1647", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/eca68e03c7f640158b9c6a6841997682\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef union(x,y):\n    x, y = find_parent(x), find_parent(y)\n    if x < y:\n        parent[y] = x\n    else:\n        parent[x] = y\n\ndef find_parent(x):\n    if x != parent[x]:\n        parent[x] = find_parent(parent[x])\n    return parent[x]\n\nN = int(input())\nparent = [i for i in range(N+1)]\narr = []\nans = []\ntotal = 0\nct = 0\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nfor i in range(N):\n    for j in range(N):\n        if i == j:\n            continue\n        ans.append((i,j,arr[i][j]))\nans.sort(key = lambda x : x[2])\nfor i in range(N*(N-1)):\n    a,b = find_parent(ans[i][0]), find_parent(ans[i][1])\n    if a != b:\n        union(a,b)\n        total += ans[i][2]\n        ct += 1\n    if ct == N-1:\n        break\nprint(total)"}
{"topic": "minimum_spanning_tree", "problem": "1922", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/e8d47d936e104388916666605df5778d\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef union(x, y):\n    x = find_parent(x)\n    y = find_parent(y)\n    if x < y:\n        parent[y] = x\n    else:\n        parent[x] = y\n\ndef find_parent(x):\n    if x != parent[x]:\n        parent[x] = find_parent(parent[x])\n    return parent[x]\n    \nN = int(input())\nM = int(input())\nparent = [i for i in range(N+1)]\narr = []\nans = 0\nfor i in range(M):\n    arr.append(list(map(int, input().split())))\narr.sort(key = lambda x : x[2])\nfor i in range(M):\n    if find_parent(arr[i][0]) != find_parent(arr[i][1]):\n        union(arr[i][0], arr[i][1])\n        ans += arr[i][2]\nprint(ans)"}
{"topic": "minimum_spanning_tree", "problem": "21924", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/5be3726ed4ca4231bc7773980ae90a6e\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef union(x, y):\n    x = find_parent(parent[x]) \n    y = find_parent(parent[y])\n    if x < y:\n        parent[y] = x\n    else:\n        parent[x] = y\n\ndef find_parent(x):\n    if x != parent[x]:\n        parent[x] = find_parent(parent[x])\n    return parent[x]\n\nN, M = map(int, input().split())\nparent = [i for i in range(N+1)]\n\ntotal = 0\ntotal_tree = 0\narr = []\nfor i in range(M):\n    arr.append(list(map(int, input().split())))\narr.sort(key = lambda x : x[2])\nfor i in range(M):\n    a = find_parent(arr[i][0])\n    b = find_parent(arr[i][1])\n    total += arr[i][2]\n    if a != b:\n        union(a,b)\n        total_tree += arr[i][2]\n\nfor i in range(1, N+1):\n    find_parent(i)\n\nif parent.count(parent[1]) == N:\n    print(total - total_tree)\nelse:\n    print(-1) "}
{"topic": "minimum_spanning_tree", "problem": "2887", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/2e3dd1e84f754eaa90dfdd6d75692910\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef find_parent(p):\n    if p_parents[p] != p:\n        p_parents[p] = find_parent(p_parents[p])\n    return p_parents[p]\n\ndef union_planet(p1, p2):\n    p1_parent = find_parent(p1)\n    p2_parent = find_parent(p2)\n    if p1_parent == p2_parent:\n        return False\n    if p1_parent < p2_parent:\n        p_parents[p2_parent] = p1_parent\n    else:\n        p_parents[p1_parent] = p2_parent\n    return True\n\nN = int(input())\nplanets = []\np_parents = [i for i in range(N)]\nedges = []\n\nfor i in range(N):\n    p_info = list(map(int, input().split()))\n    planets.append(p_info+[i])\n\nfor sort_n in range(3):\n    planets.sort(key=lambda x: x[sort_n])\n    for i in range(N - 1):\n        p1x, p1 = planets[i][sort_n], planets[i][3]\n        p2x, p2 = planets[i + 1][sort_n], planets[i + 1][3]\n        heapq.heappush(edges, [ abs(p1x - p2x), p1, p2 ])\n\nanswer = 0\ncnt = 0\nwhile edges:\n    cost, p1, p2 = heapq.heappop(edges)\n    if union_planet(p1, p2):\n        answer += cost\n        cnt += 1\n        if cnt == N - 1:\n            break\nprint(answer)"}
{"topic": "minimum_spanning_tree", "problem": "4386", "code": "# Authored by : samuel95\n# Co-authored by : -\n# Link : http://boj.kr/56db895ff06047bb8d3cea233a924472\nimport sys, math\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef find(parent, a):\n    if parent[a] == a:\n        return a\n    parent[a] = find(parent, parent[a])\n    return parent[a]\n\ndef union(parent, a, b):\n    a = find(parent, a)\n    b = find(parent, b)\n    if a > b:\n        parent[a] = b\n        return True\n    elif a < b:\n        parent[b] = a\n        return True\n    return False\n\nn = int(input())\n\n# \ubcc4\ub4e4\uc758 \uc88c\ud45c\ub97c \ub123\uc5b4\uc900\ub2e4.\nstars = []\nfor i in range(n):\n    x,y = map(float,input().split())\n    stars.append([x,y])\n    \n# MST \ud65c\uc6a9\uc744 \uc704\ud574 (\uac70\ub9ac,\uc2dc\uc791,\ub05d)\uc744 \ub9cc\ub4e0\ub2e4.\nparent = [i for i in range(n+1)]\nedges = []\nfor i in range(n-1):\n    for j in range(i+1,n):\n        start = stars[i]\n        end = stars[j]\n        distance = math.sqrt((start[0]-end[0])**2 + (start[1]-end[1])**2)\n        edges.append([distance,i,j])\n\nedges.sort()\n\ncnt, ans = 0,0\n\n# Union Find\nfor edge in edges:\n    if union(parent, edge[1], edge[2]):\n        ans += edge[0]\n        cnt += 1\n        if cnt == n - 1:\n            break\n\nprint(round(ans,2))"}
{"topic": "minimum_spanning_tree", "problem": "6497", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/b650c3b805ac4251a7a125606197836a\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nwhile True:\n    n, m = map(int, input().split())\n    \n    if n == 0 and m == 0:\n        break\n    \n    edge = []\n    total = 0\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edge.append([x, y, w])\n        total += w\n    num_edge = 0\n    edge.sort(key=lambda x: -x[2])\n\n    # Disjoint set \uad6c\uc131\n    dis_set = [-1 for _ in range(n+1)]\n    def upward(x, change_lst):\n        if dis_set[x] < 0:\n            return x\n        change_lst.append(x)\n        return upward(dis_set[x], change_lst)\n\n    def find_root(x):\n        change_lst = []\n        res = upward(x, change_lst)\n\n        for idx in change_lst:\n            dis_set[idx] = res\n        return res\n\n    def union(x, y):\n        x_root = find_root(x)\n        y_root = find_root(y)\n        if x_root != y_root: # \ub450 node\uc758 root\uac00 \ub2e4\ub974\ub2e4\uba74?\n            if dis_set[x_root] < dis_set[y_root]:\n                dis_set[y_root] = x_root\n            if dis_set[x_root] > dis_set[y_root]:\n                dis_set[x_root] = y_root\n            else:\n                dis_set[x_root] = -1\n                dis_set[y_root] = x_root\n                \n    # \ud06c\ub8e8\uc2a4\uce7c \uc2dc\uc791\n    sol = 0\n    while num_edge < n-1:\n        x, y, w = edge.pop()\n        if find_root(x) != find_root(y):\n            union(x, y)\n            sol += w\n            num_edge += 1\n\n    print(total - sol)"}
{"topic": "prefix_sum", "problem": "11659", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/6ada03e306dd451fbea38bfb38db2a74\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\nlst = list(map(int, input().split()))\nprefix_sum = [lst[0]]\nfor i in range(1, n): # \ub204\uc801 \ud569 \uad6c\ud574\ub450\uae30\n    prefix_sum.append(prefix_sum[i-1] + lst[i])\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    x -= 1\n    if x: print(prefix_sum[y-1] - prefix_sum[x-1])\n    else: print(prefix_sum[y-1])"}
{"topic": "prefix_sum", "problem": "2015", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/c3cc5338e8fa49ae8136e4af174221df\nfrom collections import defaultdict\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split())\nlst = list(map(int, input().split()))\ndic = defaultdict(int) # \uc5b4\ub5a4 \uac12\uc774 \uae30\uc874\uc5d0 \uba87 \ubc88 \ub098\uc654\ub294\uc9c0 \uc800\uc7a5\n\nfor i in range(1, n): lst[i] += lst[i-1] # \ub204\uc801\ud569 inplace\ub85c \ub9cc\ub4e4\uae30\n\ncnt = 0\nfor num in lst:\n    if num == k: cnt += 1 # 1\ubd80\ud130 \ub354\ud55c \uac12 \uc911 k \uc788\uc73c\uba74 cnt += 1\n    # O(n) \uc5f0\uc0b0 \ub300\uc2e0 dictionary\uc5d0\uc11c \ucc3e\ub294 \uac83\uc73c\ub85c \uc2dc\uac04 \ub2e8\ucd95\n    cnt += dic[num-k] # \uc774\ubbf8 \ubcf8 \ub204\uc801\ud569 \uac12\uacfc num\uc73c\ub85c k \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba74 \ucd94\uac00\n    dic[num] += 1 # num \ub9cc\ub4e4 \uc218 \uc788\ub294 \uac1c\uc218 +1\n\nprint(cnt)"}
{"topic": "shortest_path", "problem": "10282", "code": "# Authored by : yj2221\n# Co-authored by : tony9402\n# Link : http://boj.kr/b4c107ca25f442e8bef9f8486e248741\n\nimport sys\nimport heapq\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nINF = 99999999\n\ndef dijkstra(start, dependency):\n    pq = [[0,start]]\n    result = [INF for _ in range(n+1)]\n    result[start] = 0\n    while pq:\n        cur_time, cur = heapq.heappop(pq)\n        for next_com, next_time in dependency[cur].items():\n            time = cur_time + next_time\n            if result[next_com] > time:\n                result[next_com] = time\n                heapq.heappush(pq, [time, next_com])\n    return result\n\nfor testcase in range(int(input())):\n    n, d, c = map(int,input().split())\n    dependency = {i:{} for i in range(1,n+1)}\n    for _ in range(d):\n        a, b, s = map(int,input().split())\n        dependency[b][a] = s\n        \n    result = dijkstra(c, dependency)\n    result = [value for value in result if value != INF]\n    print(len(result), max(result))"}
{"topic": "shortest_path", "problem": "1719", "code": "# Authored by : yj2221\n# Co-authored by : -\n# Link : http://boj.kr/480b70b04e3b4f5c8dd567bf3bde859c\n\nimport heapq\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, m = map(int, input().split())\ngraph = {i:{} for i in range(1, n+1)}\nfor _ in range(m):\n    a, b, t = map(int, input().split())\n    graph[a][b] = min(graph[a][b], t)\n    graph[b][a] = min(graph[b][a], t)\n\nINF = 999999\ndef dijkstra(start):\n    dist_result = [INF for _ in range(n+1)]\n    dist_result[start] = 0\n    index_result = [None] * (n+1)\n    visit = [False] * (n+1)\n    visit[start] = True\n    pq = [(0, start, [])]\n    while pq:\n        cur_dist, cur, path = heapq.heappop(pq)\n        for next_node, next_dist in graph[cur].items():\n            dist = next_dist + cur_dist\n            if visit[next_node]: continue\n            if dist_result[next_node] <= dist: continue\n            dist_result[next_node] = dist\n            index_result[next_node] = path + [next_node]\n            heapq.heappush(pq, (dist, next_node, index_result[next_node]))\n    return index_result\n            \nfor start in range(1, n+1):\n    result = dijkstra(start)\n    answer = ''\n    for i in range(0, n):\n        if start==i:\n            answer+='-'\n        else:\n            answer+=str(result[i+1][0])\n        answer+=' '\n    print(answer[:-1])"}
{"topic": "simulation", "problem": "14499", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/075c16a3aae141859d0fc937c689cae6\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n    \nN, M, x, y, K = map(int, input().split())\narr = []\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\ncommand = list(map(int, input().split()))\nw, e, n, s, f, b = 0, 0, 0, 0, 0, 0\n\nfor i in command:\n    if i == 1: # \ub3d9\ucabd\uc73c\ub85c \n        dy = y + 1\n        if dy >= M:\n            continue\n        y += 1\n        w, e, n, s, f, b = s, n, w, e, f, b\n        if arr[x][y] == 0:\n            arr[x][y] = s\n        else:\n            s, arr[x][y] = arr[x][y], 0\n        print(n)\n    elif i == 2: # \uc11c\ucabd\uc73c\ub85c \uc774\ub3d9\n        dy = y - 1\n        if dy < 0:\n            continue\n        y -= 1\n        w, e, n, s, f, b = n, s, e, w, f, b\n        if arr[x][y] == 0:\n            arr[x][y] = s\n        else:\n            s, arr[x][y] = arr[x][y], 0\n        print(n)\n    elif i == 3: # \ubd81\ucabd\uc73c\ub85c \uc774\ub3d9\n        dx = x - 1\n        if dx < 0:\n            continue\n        x -= 1\n        w, e, n, s, f, b = w, e, b, f, n, s\n        if arr[x][y] == 0:\n            arr[x][y] = s\n        else:\n            s, arr[x][y] = arr[x][y], 0\n        print(n)\n    elif i == 4: # \ub0a8\ucabd\uc73c\ub85c \uc774\ub3d9\n        dx = x + 1\n        if dx >= N:\n            continue\n        x += 1\n        w, e, n, s, f, b = w, e, f, b, s, n\n        if arr[x][y] == 0:\n            arr[x][y] = s\n        else:\n            s, arr[x][y] = arr[x][y], 0\n        print(n)"}
{"topic": "simulation", "problem": "14891", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/7ce69b01ff0547dd9aa76e858a7bd215\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\narr = []\nans = 0\n\nfor i in range(4):\n    arr.append(deque(input()))\n\nK = int(input())\n\nfor i in range(K):\n    queue = deque()\n    a, b = map(int, input().split())\n    visited = [0] * 4\n    queue.append((a-1,b,arr[a-1][6],arr[a-1][2]))\n    visited[a-1] = 1\n    arr[a-1].rotate(b)\n    while queue:\n        n,d,l,r = queue.popleft()\n        if n-1 >= 0 and arr[n-1][2] != l and visited[n-1] == 0:\n            visited[n-1] = 1\n            queue.append((n-1, -d, arr[n-1][6], arr[n-1][2]))\n            arr[n-1].rotate(-d)\n        if n+1 < 4 and arr[n+1][6] != r and visited[n+1] == 0:\n            visited[n+1] = 1\n            queue.append((n+1, -d, arr[n+1][6], arr[n+1][2]))\n            arr[n+1].rotate(-d)\n\nfor i in range(4):\n    if arr[i][0] == '1':\n        ans += 2 ** i\n\nprint(ans)"}
{"topic": "simulation", "problem": "16234", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/1be97bce103a4572936b311c3f1a096b\n\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef BFS(x,y):\n    global flag, total\n    queue = deque()\n    queue.append((x,y))\n    ans.append((x,y))\n    while queue:\n        q = queue.popleft()\n        for i in range(4):\n            dx = nx[i] + q[0]\n            dy = ny[i] + q[1]\n            if dx < 0 or dx >= N or dy < 0 or dy >= N:\n                continue\n            if visited[dx][dy] == 1:\n                continue\n            if abs(arr[dx][dy] - arr[q[0]][q[1]]) >= L and abs(arr[dx][dy] - arr[q[0]][q[1]]) <= R:\n                visited[dx][dy] = 1\n                flag = 1\n                total += arr[dx][dy]\n                queue.append((dx,dy))\n                ans.append((dx,dy))\n\nN, L, R = map(int, input().split())\narr = []\nday = 0\nnx = [-1, 0, 1, 0]\nny = [0, -1, 0, 1]\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\nwhile True:\n    flag = 0\n    visited = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if visited[i][j] == 0:\n                ans = deque()\n                total = arr[i][j]\n                visited[i][j] = 1\n                BFS(i,j)\n                if len(ans) > 1:\n                    aver = total // len(ans)\n                    while ans:\n                        a = ans.popleft()\n                        arr[a[0]][a[1]] = aver\n    if not flag:\n        break\n    day += 1\nprint(day)"}
{"topic": "simulation", "problem": "20058", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/f0c88b8e08204d33a7e63a384b5fdc4c\nimport sys\nfrom copy import deepcopy\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndy = (-1, 1, 0, 0)\ndx = ( 0, 0,-1, 1)\nK, Q = map(int, input().split())\nN = 1 << K\n\narr = list()\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\n\nCMD = list(map(int, input().split()))\n\nfor _L in CMD:\n    L = 1 << _L\n    tmp = deepcopy(arr)\n    for i in range(0, N, L):\n        for j in range(0, N, L):\n            for n in range(0, L):\n                for m in range(0, L):\n                    arr[i + m][j + L - 1 - n] = tmp[i + n][j + m]\n\n    tmp = deepcopy(arr)\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 0:\n                continue\n            cnt = 0\n            for k in range(4):\n                y = i + dy[k]\n                x = j + dx[k]\n                if 0 > y or y >= N or 0 > x or x >= N:\n                    continue\n                if arr[y][x] != 0:\n                    cnt += 1\n\n            if cnt < 3:\n                tmp[i][j] -= 1\n    arr = deepcopy(tmp)\n\ntotal = 0\nmx    = 0\n\nfor i in range(N):\n    for j in range(N):\n        if arr[i][j] == 0:\n            continue\n        cnt = 0\n        que = deque()\n        que.append((i, j))\n        total += arr[i][j]\n        arr[i][j] = 0\n        while len(que) != 0:\n            cy, cx = que.popleft()\n            cnt += 1\n            for k in range(4):\n                y = cy + dy[k]\n                x = cx + dx[k]\n                if 0 > y or y >= N or 0 > x or x >= N or arr[y][x] == 0:\n                    continue\n                que.append((y, x))\n                total += arr[y][x]\n                arr[y][x] = 0\n        mx = max(mx, cnt)\n\nprint(f\"{total}\\n{mx}\")"}
{"topic": "simulation", "problem": "21610", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/709edf708bcb49e3972565b8fce5a993\n\nimport sys\nfrom collections import deque\nfrom copy import deepcopy\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, M = map(int, input().split())\narr = []\nmove = []\nvisited = [[0 for x in range(N)] for y in range(N)]\nstorm = []\nnx = [0,-1,-1,-1,0,1,1,1]\nny = [-1,-1,0,1,1,1,0,-1]\n\nfor i in range(N):\n    arr.append(list(map(int, input().split())))\n\nfor i in range(M):\n    move.append(list(map(int, input().split())))\n\nstorm.append((N-1, 0))\nstorm.append((N-1, 1))\nstorm.append((N-2, 0))\nstorm.append((N-2, 1))\n\nfor i in range(M):\n    d, s = move[i][0]-1, move[i][1]\n    visited = [[0 for x in range(N)] for y in range(N)]\n    new_storm = []\n    for j in range(len(storm)):\n        dx = storm[j][0] + nx[d] * s\n        dy = storm[j][1] + ny[d] * s\n        if dx < 0:\n            while True:\n                new_dx = dx + N\n                if new_dx >= N:\n                    break\n                dx += N\n        elif dx >= N:\n            while True:\n                new_dx = dx - N\n                if new_dx < 0:\n                    break\n                dx -= N\n        if dy < 0:\n            while True:\n                new_dy = dy + N\n                if new_dy >= N:\n                    break\n                dy += N\n        elif dy >= N:\n            while True:\n                new_dy = dy - N\n                if new_dy < 0:\n                    break\n                dy -= N\n        new_storm.append((dx,dy))\n        visited[dx][dy] = 1\n\n    for j in range(len(new_storm)):\n        arr[new_storm[j][0]][new_storm[j][1]] += 1\n\n    save = []\n    for j in range(len(new_storm)):\n        ct = 0\n        for z in range(1,8,2):\n            dx = new_storm[j][0] + nx[z]\n            dy = new_storm[j][1] + ny[z]\n            if dx < 0 or dx >= N:\n                continue\n            if dy < 0 or dy >= N:\n                continue\n            if arr[dx][dy] > 0:\n                ct += 1\n        save.append(ct)\n\n    for j in range(len(new_storm)):\n        arr[new_storm[j][0]][new_storm[j][1]] += save[j]\n\n    storm = []\n    for x in range(N):\n        for y in range(N):\n            if visited[x][y] == 0 and arr[x][y] >= 2:\n                arr[x][y] -= 2\n                storm.append((x,y))\n\ntotal = 0\nfor i in range(N):\n    for j in range(N):\n        if arr[i][j] > 0:\n            total += arr[i][j]\n\nprint(total)"}
{"topic": "simulation", "problem": "3190", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/726b58947cd144afa6fa9abf2b491ac7\nimport sys\nfrom collections import deque\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = [[0 for i in range(N)] for j in range(N)]\napple = [0] * 10005\n\nK = int(input())\n\nfor i in range(K):\n    a,b = map(int, input().split())\n    arr[a-1][b-1] = 1\nL = int(input())\nnx = [1,0,-1,0]\nny = [0,1,0,-1]\nd = 1\ntime = 1\n\nqueue = deque()\nqueue.append((0,0))\nfor i in range(L):\n    a,b = input().split()\n    apple[int(a)] = b\n\nwhile True:\n    x,y = queue.pop()\n    dx = nx[d] + x\n    dy = ny[d] + y\n    if (dx, dy) in queue or dx < 0 or dx >= N or dy < 0 or dy >= N:\n        break\n    if arr[dx][dy] == 1:\n        arr[dx][dy] = 0\n        queue.append((x,y))\n        queue.append((dx,dy))\n    else:\n        queue.append((x,y))\n        queue.append((dx,dy))\n        queue.popleft()\n    if apple[time] == 'L':\n        d = (d+1) % 4\n    elif apple[time] == 'D':\n        d = (d+3) % 4\n    time += 1\n\nprint(time)"}
{"topic": "string", "problem": "1032", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/c400c0aa10ea40bc809ad78029ac721d\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\nans = ''\nfor i in range(N):\n    arr.append(input())\nfor i in range(len(arr[0])):\n    ct = 0\n    word = arr[0][i]\n    for j in range(N):\n        if word == arr[j][i]:\n            ct += 1\n    if ct == N:\n        ans += word\n    else:\n        ans += '?'\nprint(ans)"}
{"topic": "string", "problem": "10798", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/a1c26275e6af44f5a080d54a61b4c677\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\narr = []\nans = ''\nmax_len = 0\nfor i in range(5):\n    a = input()\n    max_len = max(max_len, len(a))\n    arr.append(a)\n\nfor i in range(max_len):\n    for j in range(5):\n        if len(arr[j]) <= i:\n            continue\n        ans += arr[j][i]\n\nprint(ans)"}
{"topic": "string", "problem": "11365", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/d59f549a75a84dd28c01a0f9c08eb169\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nwhile True:\n    \n    password = input()\n    \n    if password == 'END':\n        break\n    else:\n        print(password[::-1])"}
{"topic": "string", "problem": "1152", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/f95f97c2cdd74f5f9b832c2e394d4123\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nword = input().split()\nprint(len(word))"}
{"topic": "string", "problem": "11720", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/85503261a5b5492ca153ccbe74adf43d\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nnum = input()\ntotal = 0\nfor i in num:\n    total += int(i)\n\nprint(total)"}
{"topic": "string", "problem": "1181", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/c540e6d57a39460eb360903623b90eec\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = []\n\nfor i in range(N):\n    arr.append(input())\n\narr = list(set(arr))\narr.sort(key = lambda x : (len(x), x))\n\nfor i in arr:\n    print(i)"}
{"topic": "string", "problem": "12871", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/7d4da3364b4d4735b5f99d946b785fff\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef GCD(x,y):\n    if y == 0:\n        return x\n    else:\n        return GCD(y, x%y)\n\ns = input()\nt = input()\ngcd = GCD(len(s),len(t))\nlcm = len(s) * len(t) // gcd\ns = s * (lcm // len(s))\nt = t * (lcm // len(t))\nif s == t:\n    print(1)\nelse:\n    print(0)"}
{"topic": "string", "problem": "1316", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/1649bc736d5e4692b067d78aa43b2edc\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nans = N\nfor i in range(N):\n    a = input()\n    dic = {}\n    while True:\n        flag = 0\n        for j in range(len(a)-1):\n            if a[j] == a[j+1]:\n                a = a[:j] + a[j+1:]\n                flag = 1\n                break\n        if flag == 0:\n            break\n    for j in a:\n        if j not in dic:\n            dic[j] = 1\n        else:\n            ans -=1\n            break\nprint(ans)"}
{"topic": "string", "problem": "17609", "code": "# Authored by : chj3748\n# Co-authored by : -\n# Link : http://boj.kr/35708a61bb1d4149952929e8154ba152\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef palin(start, end, del_cnt):\n    if del_cnt == 2:\n        return del_cnt\n    while start <= end:\n        if string[start] != string[end]:\n            a = palin(start + 1, end, del_cnt + 1)\n            b = palin(start, end - 1, del_cnt + 1)\n            return a if a <= b else b\n        start += 1\n        end -= 1\n    else:\n        return del_cnt\n\nfor T in range(int(input())):\n    string = input()\n    print(palin(0, len(string) - 1, 0))"}
{"topic": "string", "problem": "20154", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/ff79a90b0e024c4eb328a8595918b096\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nDB = [3, 2, 1, 2, 3, 3, 3, 3, 1, 1, 3, 1, 3, 3, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 2, 1]\ndic = {}\nfor idx, data in enumerate(DB):\n    dic[chr(idx+65)] = DB[idx] # 'A' : 65\n\ntotal = 0\na = input()\nfor i in a:\n    total += dic[i]\ntotal = total % 10\nif total % 2 == 1:\n    print(\"I'm a winner!\")\nelse:\n    print(\"You're the winner?\")"}
{"topic": "string", "problem": "2204", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/685c4c3dc1c24c118d3c89ffdefa6679\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    arr = []\n    for i in range(n):\n        a = input()\n        a_lower = a.lower()\n        arr.append((a,a_lower))\n    arr.sort(key = lambda x : x[1])\n    print(arr[0][0])"}
{"topic": "string", "problem": "2744", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/39641966833845ec931ab403fc15026d\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nword = input()\nans = ''\nfor i in word:\n    if i.islower():\n        ans += i.upper()\n    else:\n        ans += i.lower()\nprint(ans)"}
{"topic": "string", "problem": "3029", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/a2586b306e3340caa3740e5953662eeb\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef isBig():\n    if start[0] < end[0]:\n        return 1\n    elif start[0] == end[0]:\n        if start[1] < end[1]:\n            return 1\n        elif start[1] == end[1]:\n            if start[2] < end[2]:\n                return 1\n            elif start[2] == end[2]:\n                return 0\n            else:\n                return -1\n        else:\n            return -1\n    else:\n        return -1\n            \nstart = list(map(int, input().split(':')))\nend = list(map(int, input().split(':')))\ntotal = start[0] * 3600 + start[1] * 60 + start[2]\ntotal2 = end[0] * 3600 + end[1] * 60 + end[2]\nif isBig() == 1:\n    ans = total2 - total\n    hour, minute, second = str(ans // 3600), str(ans % 3600 // 60), str(ans % 60)\n    hour = '0' * (2-len(hour)) + hour\n    minute = '0' * (2-len(minute)) + minute\n    second = '0' * (2-len(second)) + second\n    print(f\"%s:%s:%s\" % (hour, minute, second))\nelif isBig() == 0:\n    print('24:00:00')\nelse:\n    ans = total2 - total + 3600 * 24\n    hour, minute, second = str(ans // 3600), str(ans % 3600 // 60), str(ans % 60)\n    hour = '0' * (2-len(hour)) + hour\n    minute = '0' * (2-len(minute)) + minute\n    second = '0' * (2-len(second)) + second\n    print(f\"%s:%s:%s\" % (hour, minute, second))"}
{"topic": "string", "problem": "9046", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/ecd357e546d24b059db0160435e99364\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nfor i in range(N):\n    a = input()\n    total = {}\n    for j in a:\n        if j == ' ':\n            continue\n        if j not in total:\n            total[j] = 1\n        else:\n            total[j] += 1\n    new_total = list(total.items())\n    if len(new_total) == 1:\n        print(new_total[0][0])\n    else:\n        new_total.sort(key = lambda x : -x[1])\n        if new_total[0][1] == new_total[1][1]:\n            print('?')\n        else:\n            print(new_total[0][0])"}
{"topic": "string", "problem": "9342", "code": "# Authored by : tony9402\n# Co-authored by : -\n# Link : http://boj.kr/4fcec3ea35e4472bbca8beeebd2fe065\nimport sys\nimport re\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nregex = re.compile('^[A-F]?A+F+C+[A-F]?$')\nN = int(input())\nfor testcase in range(N):\n    line = input()\n    print(\"Infected!\" if regex.match(line) else \"Good\")"}
{"topic": "tree", "problem": "15681", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/74cde7f86d27498c9a3a724e4ddc206f\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nsys.setrecursionlimit(1000000) # \uaf2d \uac78\uc5b4\uc8fc\ub3c4\ub85d \ud558\uc790.... (Python \uc778 \uacbd\uc6b0)\n\nn, root, query = map(int, input().split())\ntree = [[] for _ in range(n+1)]\nfor _ in range(n-1): # Tree \uc0dd\uc131\n    x, y = map(int, input().split())\n    tree[x].append(y)\n    tree[y].append(x)\n\nnum_child = [0]*(n+1)\n\ndef dfs(cur, parent):\n    if len(tree[cur]) == 1 and parent != -1: # Leaf node\ub77c\uba74\n        num_child[cur] = 1\n        return 1\n\n    n_sub = 0 # cur\ub97c root\ub85c \ud558\ub294 subtree\uc758 node \uac1c\uc218\n    for child in tree[cur]:\n        if child != parent: # \uac01 child\ub97c root\ub85c \ud558\ub294 subtree\uc758 node \uac1c\uc218 \ucd94\uac00\n            n_sub += dfs(child, cur)\n    num_child[cur] = n_sub + 1 # \ubcf8\uc778 \ucd94\uac00\n    return n_sub + 1\n\ndfs(root, -1)\n\nfor _ in range(query):\n    print(num_child[int(input())])"}
{"topic": "two_pointer", "problem": "15961", "code": "# Authored by : kis03160\n# Co-authored by : tony9402\n# Link : http://boj.kr/a074da0ce3c34775a50d386da92800e4\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef answer(line, max_seq, coupon):\n\n    count = 0\n    for i in range(max_seq):\n        food_number = line[i]\n        if not eat[food_number]:\n            count += 1\n        eat[food_number] += 1\n\n    max_count = count\n    for i in range(1, n):\n        if max_count <= count:\n            if not eat[coupon]:\n                max_count = count + 1\n            else:\n                max_count = count\n\n        out = i - 1\n        eat[line[out]] -= 1\n        if not eat[line[out]]:\n            count -= 1\n            \n        in_ = (i + max_seq - 1) % n\n        if not eat[line[in_]]:\n            count += 1\n        eat[line[in_]] += 1\n\n    return max_count\n\nn, f_kind, max_seq, coupon = map(int, input().split())\nline = [int(input()) for _ in range(n)]\neat = [0 for _ in range(3000001)]\nprint(answer(line, max_seq, coupon))"}
{"topic": "two_pointer", "problem": "1806", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/a020564994b8493a92b189861e35636c\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn, s = map(int, input().split())\nlst = list(map(int, input().split()))\n\nl_p, r_p, cur_sum, min_len = 0, 0, 0, 100002\n# cur_sum\uc5d0 \uc800\uc7a5\ub418\ub294 \uad6c\uac04\ud569: sum(lst[l_p:r_p])\n\nwhile l_p < n:\n    if cur_sum >= s: # \ud604\uc7ac \uad6c\uac04\uc774 \uc8fc\uc5b4\uc9c4 s\ubcf4\ub2e4 \ud06c\ub2e4\uba74\n        min_len = min(min_len, r_p-l_p) #\ud604\uc7ac \uad6c\uac04 \uae38\uc774(r_p-l_p)\uac00 \ucd5c\uc18c\ub77c\uba74 \uc5c5\ub370\uc774\ud2b8\n        cur_sum -= lst[l_p] #\uc67c\ucabd \ud3ec\uc778\ud130\ub97c \ud55c \uce78 \uc624\ub978\ucabd\uc73c\ub85c \uc62e\uae30\uace0 \uad6c\uac04 \ud569 \uc5c5\ub370\uc774\ud2b8\n        l_p += 1\n\n    elif r_p == n: #\uc624\ub978\ucabd \ub05d\uc5d0 \ub3c4\ub2ec\ud588\ub2e4\uba74?\n        break\n    \n    else:\n        cur_sum += lst[r_p] #\uc624\ub978\ucabd \uad6c\uac04\uc744 \uc6c0\uc9c1\uc5ec\uc11c \uad6c\uac04 \ud569 \uc5c5\ub370\uc774\ud2b8\n        r_p += 1\n\nprint(min_len if min_len < 100001 else 0)"}
{"topic": "two_pointer", "problem": "1940", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/901436e12d914d5e9effcd67494bbb44\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\nM = int(input())\narr = list(map(int, input().split()))\narr.sort()\nans = 0\ns, e = 0, len(arr) - 1\nwhile s < e:\n    if arr[s] + arr[e] > M:\n        e -= 1\n    elif arr[s] + arr[e] < M:\n        s += 1\n    else:\n        s += 1\n        e -= 1\n        ans += 1\nprint(ans)"}
{"topic": "two_pointer", "problem": "2018", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/2b640a2f6eb74e08aae6e351cfcbf537\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN = int(input())\narr = [i for i in range(1, N+1)]\ns, e = 0, 0\nans = 0\ntotal = 0\nwhile True:\n    if total < N:\n        total += arr[e]\n        e += 1\n    elif e == len(arr):\n        break\n    elif total >= N:\n        if total == N:\n            ans += 1\n        total -= arr[s]\n        s += 1\nprint(ans+1)"}
{"topic": "two_pointer", "problem": "2473", "code": "# Authored by : cieske\n# Co-authored by : -\n# Link : http://boj.kr/4d3bf96075df4b31b9a95038e6c649e6\n\nimport sys\ndef input():\n    return sys.stdin.readline().rstrip()\n\nn = int(input())\nlst = sorted(list(map(int, input().split()))) # \uc815\ub82c \ud544\uc694\n\nres = 4000000000 # INF \ub300\uc6a9\nsol_candi = []\n\nfor i in range(n-2):\n    refer = lst[i] # \ub808\ud37c\ub7f0\uc2a4 \uac12 \ud558\ub098\ub97c \uc7a1\uc544\ub193\uace0\n    l_p = i+1 # \ub808\ud37c\ub7f0\uc2a4 \uac12\uc744 \uc81c\uc678\ud55c \uc591 \ub05d\uc5d0\uc11c \ud22c \ud3ec\uc778\ud130 \uc774\ub3d9\n    r_p = n-1 # \ud604\uc7ac i \uc774\uc804\uc5d0 \ubcf8 \ub808\ud37c\ub7f0\uc2a4 \uac12\uc740 \ub354 \uc774\uc0c1 \ud544\uc694 \uc5c6\uc74c!\n    while l_p < r_p: # \ub450 \ud3ec\uc778\ud130\uac00 \ub9cc\ub098\uae30 \uc804\uae4c\uc9c0\n        cur_sum = refer + lst[l_p] + lst[r_p] # \ub808\ud37c\ub7f0\uc2a4 \uac12 + \ub450 \ud3ec\uc778\ud130\uac00 \uac00\ub9ac\ud0a4\ub294 \uac12\uc758 \ud569\n        if abs(cur_sum) <= abs(res): # \uc808\ub313\uac12\uc774 0\uc5d0 \uac00\uae4c\uc6b4 \uac83\uc774 \ubaa9\ud45c\n            sol_candi = [refer, lst[l_p], lst[r_p]] # \uc815\ub2f5 \ud6c4\ubcf4\uad70 update\n            res = refer + lst[l_p] + lst[r_p]\n        #\ud604\uc7ac \uac12\uc774 \uc815\ub2f5\uc774 \uc544\ub2c8\ub77c\uba74 \ud3ec\uc778\ud130 \uc774\ub3d9\n        if cur_sum < 0:\n            l_p += 1\n        elif cur_sum > 0:\n            r_p -= 1\n        else:\n            print(*sol_candi) # \uc815\ud655\ud788 0\uc774 \ub418\ub294 \uc870\ud569\uc744 \ucc3e\uc558\uc73c\uba74 \ub354 \ubcfc \ud544\uc694 \uc5c6\uc774\n            sys.exit()        # \ubc14\ub85c \ucd9c\ub825\ud558\uace0 \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc\n\nprint(*sol_candi)"}
{"topic": "two_pointer", "problem": "2559", "code": "# Authored by : gusdn3477\n# Co-authored by : -\n# Link : http://boj.kr/1d6b566a715d4126b3cd42cc39521ac0\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nN, K = map(int, input().split())\narr = list(map(int, input().split()))\ntotal = 0\nMAX = -1e9\ns, e = 0, K-1\nif K == 1:\n    print(max(arr))\nelse:\n    total = sum(arr[:K])\n    while True:\n        MAX = max(MAX, total)\n        total -= arr[s]\n        s += 1\n        e += 1\n        if e == N:\n            break\n        total += arr[e]\n    print(MAX)"}
